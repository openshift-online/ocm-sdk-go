{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "clusters_mgmt",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "OCM Feedback",
      "email": "ocm-feedback@redhat.com"
    }
  },
  "servers": [
    {
      "description": "Production",
      "url": "https://api.openshift.com"
    },
    {
      "description": "Stage",
      "url": "https://api.stage.openshift.com"
    }
  ],
  "paths": {
    "/api/clusters_mgmt/v1": {
      "get": {
        "description": "Retrieves the version metadata.",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/addons": {
      "post": {
        "description": "Create a new add-on and add it to the collection of add-ons.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOn"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of add-ons.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to sort the add-ons\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nadd-ons with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the add-ons\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of add-ons.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddOn"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/addons/{addon_id}": {
      "delete": {
        "description": "Deletes the add-on.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the add-on.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the add-on.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/addons/{addon_id}/versions": {
      "post": {
        "description": "Create a new add-on version and add it to the collection of add-ons.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOnVersion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of add-on versions.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to sort the add-on\nversions descending by id the value should be:\n\n```sql\nid desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the add-on version instead\nof the names of the columns of a table. For example, in order to retrieve all the\nadd-on versions with an id starting with `0.1` the value should be:\n\n```sql\nid like '0.1.%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the add-on\nversions that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of add-on versions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddOnVersion"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/addons/{addon_id}/versions/{version_id}": {
      "delete": {
        "description": "Deletes the add-on version.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the add-on version.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the add-on version.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOnVersion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_infrastructure_access_roles": {
      "get": {
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the role instead of\nthe names of the columns of a table. For example, in order to sort the roles\ndescending by dislay_name the value should be:\n\n```sql\ndisplay_name desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the role instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nrole with a name starting with `my`the value should be:\n\n```sql\ndisplay_name like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the roles\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of roles.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AWSInfrastructureAccessRole"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_infrastructure_access_roles/{aws_infrastructure_access_role_id}": {
      "get": {
        "description": "Retrieves the details of the aws infrastructure access role.",
        "parameters": [
          {
            "name": "aws_infrastructure_access_role_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AWSInfrastructureAccessRole"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/machine_types": {
      "post": {
        "description": "Retrieves the list of machine types in the provided region.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of machine types.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MachineType"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/regions": {
      "post": {
        "description": "Retrieves the list of available regions of the cloud provider.\nIMPORTANT: This list doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available regions\nof the provider.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of regions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudRegion"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available regions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/sts_account_roles": {
      "post": {
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nbe the total number of STS account roles.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWS"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aws_account_id": {
                      "description": "The AWS Account Id for the STS Account Roles",
                      "type": "string"
                    },
                    "items": {
                      "description": "Retrieved list of STS Account Roles",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AWSSTSAccountRole"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nbe the total number of STS account roles.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of STS account roles",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/sts_credential_requests": {
      "get": {
        "description": "Retrieves the list of policies.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of CredRequest.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/STSCredentialRequest"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/sts_policies": {
      "get": {
        "description": "Retrieves the list of policies.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the awsstspolicies instead of\nthe names of the columns of a table. For example, in order to sort the policies\ndescending by operator type identifier the value should be:\n\n```sql\norderBy id desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the awsstspolicies instead of\nthe names of the columns of a table. For example, in order to retrieve all the\npolicies of type  `operatorrole`\nshould be:\n\n```sql\npolicy_type like 'OperatorRole%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\npolicies  will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of policies.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AWSSTSPolicy"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/validate_credentials": {
      "post": {
        "description": "Manages aws creds validation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudProviderData"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/aws_inquiries/vpcs": {
      "post": {
        "description": "Retrieves the list of available vpcs of the cloud provider for specific region.\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available vpcs\nof the provider.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nvpcs of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud VPC.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudVPC"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nvpcs of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available vpcs of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/cloud_providers": {
      "get": {
        "description": "Retrieves the list of cloud providers.",
        "parameters": [
          {
            "name": "fetchRegions",
            "description": "If true, includes the regions on each provider in the output. Could slow request response time.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the cloud provider\ninstead of the names of the columns of a table. For example, in order to sort the\nclusters descending by name identifier the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the cloud provider\ninstead of the names of the columns of a table. For example, in order to retrieve\nall the cloud providers with a name starting with `A` the value should be:\n\n```sql\nname like 'A%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the clusters\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud providers.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudProvider"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}": {
      "get": {
        "description": "Retrieves the details of the cloud provider.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudProvider"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/available_regions": {
      "post": {
        "description": "Retrieves the list of available regions of the cloud provider.\n\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available regions\nof the provider.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWS"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud regions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudRegion"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available regions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/regions": {
      "post": {
        "description": "Adds a cloud region to the database.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudRegion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudRegion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of regions of the cloud provider.\n\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of regions\nof the provider.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud providers.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudRegion"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of regions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/regions/{region_id}": {
      "delete": {
        "description": "Deletes the region.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "region_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the region.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "region_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudRegion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the region.",
        "parameters": [
          {
            "name": "cloud_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "region_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudRegion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudRegion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters": {
      "post": {
        "description": "Provision a new cluster and add it to the collection of clusters.\n\nSee the `register_cluster` method for adding an existing cluster.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cluster"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of clusters.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the cluster instead of\nthe names of the columns of a table. For example, in order to sort the clusters\ndescending by region identifier the value should be:\n\n```sql\nregion.id desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the cluster instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nclusters with a name starting with `my` in the `us-east-1` region the value\nshould be:\n\n```sql\nname like 'my%' and region.id = 'us-east-1'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nclusters that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of clusters.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Cluster"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}": {
      "delete": {
        "description": "Deletes the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "best_effort",
            "description": "BestEffort flag is used to check if the cluster deletion should be best-effort mode or not.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deprovision",
            "description": "If false it will only delete from OCM but not the actual cluster resources.\nfalse is only allowed for OCP clusters. true by default.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dry_run",
            "description": "Dry run flag is used to check if the operation can be completed, but won't delete.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cluster"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/hibernate": {
      "post": {
        "description": "Initiates cluster hibernation. While hibernating a cluster will not consume any cloud provider infrastructure\nbut will be counted for quota.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/resume": {
      "post": {
        "description": "Resumes from Hibernation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_inquiries": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to sort the add-ons\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nadd-ons with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the add-ons\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of add-ons.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddOn"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_inquiries/{addon_inquiry_id}": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_inquiry_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies": {
      "post": {
        "description": "Adds a new addon upgrade policy to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonUpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of addon upgrade policies.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of addon upgrade policy.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonUpgradePolicy"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}": {
      "delete": {
        "description": "Deletes the addon upgrade policy.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the addon upgrade policy.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the addon upgrade policy.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonUpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}/state": {
      "get": {
        "description": "Retrieves the details of the upgrade policy state.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonUpgradePolicyState"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the upgrade policy state.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonUpgradePolicyState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonUpgradePolicyState"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addons": {
      "post": {
        "description": "Create a new add-on installation and add it to the collection of add-on installations on the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOnInstallation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnInstallation"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of add-on installations.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the add-on installation\ninstead of the names of the columns of a table. For example, in order to sort the\nadd-on installations descending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the add-on installation\ninstead of the names of the columns of a table. For example, in order to retrieve\nall the add-on installations with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the add-on\ninstallations that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of add-on installations.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddOnInstallation"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/addons/{addoninstallation_id}": {
      "delete": {
        "description": "Delete an add-on installation and remove it from the collection of add-on installations on the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addoninstallation_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the add-on installation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addoninstallation_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnInstallation"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the add-on installation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addoninstallation_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOnInstallation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnInstallation"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/autoscaler": {
      "delete": {
        "description": "Deletes the cluster autoscaler.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the autoscaler of a cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAutoscaler"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new cluster autoscaler object.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterAutoscaler"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAutoscaler"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the cluster autoscaler.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterAutoscaler"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAutoscaler"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration": {
      "get": {
        "description": "Retrieves the details of the configuration for the Private Link.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateLinkConfiguration"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration/principals": {
      "post": {
        "description": "Adds a new principal for the Private Link.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivateLinkPrincipal"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateLinkPrincipal"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of principals.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the role binding\ninstead of the names of the columns of a table. For example, in order to\nretrieve role bindings with role_id AuthenticatedUser:\n\n```sql\nrole_id = 'AuthenticatedUser'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of principals.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PrivateLinkPrincipal"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration/principals/{principal_id}": {
      "delete": {
        "description": "Deletes the principal.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "principal_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the principal.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "principal_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateLinkPrincipal"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/role_policy_bindings": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "fetchCurrent",
            "description": "If true, retrieves role policy binding states from AWS.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of role policy bindings.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RolePolicyBinding"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants": {
      "post": {
        "description": "Create a new AWS infrastructure access role grant and add it to the collection of\nAWS infrastructure access role grants on the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSInfrastructureAccessRoleGrant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AWSInfrastructureAccessRoleGrant"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of AWS infrastructure access role grants.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the AWS infrastructure access role grant\ninstead of the names of the columns of a table. For example, in order to sort the\nAWS infrastructure access role grants descending by user ARN the value should be:\n\n```sql\nuser_arn desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the AWS infrastructure access role grant\ninstead of the names of the columns of a table. For example, in order to retrieve\nall the AWS infrastructure access role grants with a user ARN starting with `user` the value should be:\n\n```sql\nuser_arn like '%user'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the AWS\ninfrastructure access role grants that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of AWS infrastructure access role grants.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AWSInfrastructureAccessRoleGrant"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants/{aws_infrastructure_access_role_grant_id}": {
      "delete": {
        "description": "Deletes the AWS infrastructure access role grant.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "aws_infrastructure_access_role_grant_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the AWS infrastructure access role grant.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "aws_infrastructure_access_role_grant_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AWSInfrastructureAccessRoleGrant"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/break_glass_credentials": {
      "post": {
        "description": "Adds a new break glass credential to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BreakGlassCredential"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreakGlassCredential"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Revokes all the break glass certificates signed by a specific signer.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of break glass credentials.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the break glass credentials\ninstead of the the names of the columns of a table. For example, in order to sort the\ncredentials descending by identifier the value should be:\n\n```sql\nid desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the break glass credentials\ninstead of the names of the columns of a table. For example, in order to retrieve all\nthe credentials with a specific username and status the following is required:\n\n```sql\nusername='user1' AND status='expired'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nbreak glass credentials that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of break glass credentials.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BreakGlassCredential"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/break_glass_credentials/{break_glass_credential_id}": {
      "get": {
        "description": "Retrieves the details of the break glass credential.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "break_glass_credential_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreakGlassCredential"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/clusterdeployment": {
      "delete": {
        "description": "Deletes the clusterdeployment.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies": {
      "post": {
        "description": "Adds a new upgrade policy to the control plane of the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPlaneUpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPlaneUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of upgrade policies for the control plane.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of upgrade policy.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ControlPlaneUpgradePolicy"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies/{control_plane_upgrade_policy_id}": {
      "delete": {
        "description": "Deletes the upgrade policy for the control plane.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "control_plane_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the upgrade policy for the control plane.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "control_plane_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPlaneUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the upgrade policy for the control plane.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "control_plane_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPlaneUpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPlaneUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/credentials": {
      "get": {
        "description": "Retrieves the details of the credentials of a cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCredentials"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/delete_protection": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProtection"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProtection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProtection"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_auth_config": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuthConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_auth_config/external_auths": {
      "post": {
        "description": "Adds a new authentication to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuth"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of external authentications.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExternalAuth"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_auth_config/external_auths/{external_auth_id}": {
      "delete": {
        "description": "Deletes the external authentication.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "external_auth_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of an external authentication.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "external_auth_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuth"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the external authentication.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "external_auth_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuth"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration": {
      "get": {
        "description": "Retrieves the details of the external configuration.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalConfiguration"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels": {
      "post": {
        "description": "Adds a new label to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of labels.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of labels.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels/{label_id}": {
      "delete": {
        "description": "Deletes the label.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "label_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the label.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "label_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the label.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "label_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests": {
      "post": {
        "description": "Adds a new manifest to a cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manifest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of manifests.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of Manifests.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Manifest"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests/{manifest_id}": {
      "delete": {
        "description": "Deletes the manifest.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "manifest_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the manifest.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "manifest_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the manifest.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "manifest_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manifest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets": {
      "post": {
        "description": "Adds a new syncset to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Syncset"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Syncset"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of syncsets.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of syncsets.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Syncset"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets/{syncset_id}": {
      "delete": {
        "description": "Deletes the syncset.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "syncset_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the syncset.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "syncset_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Syncset"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the syncset.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "syncset_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Syncset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Syncset"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/gate_agreements": {
      "post": {
        "description": "Adds a new agreed version gate to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionGateAgreement"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionGateAgreement"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of reasons.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of version gate agreement.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VersionGateAgreement"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/gate_agreements/{version_gate_agreement_id}": {
      "delete": {
        "description": "Deletes the version gate agreement.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_gate_agreement_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the version gate agreement.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_gate_agreement_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionGateAgreement"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/groups": {
      "get": {
        "description": "Retrieves the list of groups.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of groups.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Group"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}": {
      "get": {
        "description": "Retrieves the details of the group.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users": {
      "post": {
        "description": "Adds a new user to the group.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of users.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of users.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users/{user_id}": {
      "delete": {
        "description": "Deletes the user.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the user.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/hypershift": {
      "get": {
        "description": "Retrieves the Hypershift details for a single cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HypershiftConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the Hypershift details for a single cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HypershiftConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HypershiftConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers": {
      "post": {
        "description": "Adds a new identity provider to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProvider"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of identity providers.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of identity providers.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IdentityProvider"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}": {
      "delete": {
        "description": "Deletes the identity provider.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the identity provider.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update identity provider in the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProvider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users": {
      "post": {
        "description": "Adds a new user to the _HTPasswd_ file.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HTPasswdUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTPasswdUser"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of _HTPasswd_ IDP users.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of users of the IDP.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HTPasswdUser"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users/import": {
      "post": {
        "description": "Adds multiple new users to the _HTPasswd_ file.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "description": "List of users to add to the IDP.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/HTPasswdUser"
                    }
                  },
                  "page": {
                    "description": "Index of the requested page, where one corresponds to the first page.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "size": {
                    "description": "Number of items contained in the returned page.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Updated list of users of the IDP.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HTPasswdUser"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users/{htpasswd_user_id}": {
      "delete": {
        "description": "Deletes the user.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "htpasswd_user_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the user.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "htpasswd_user_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTPasswdUser"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the user's password. The username is not editable",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "identity_provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "htpasswd_user_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HTPasswdUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTPasswdUser"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/inflight_checks": {
      "get": {
        "description": "Retrieves the list of inflight checks.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of inflight checks.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InflightCheck"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/inflight_checks/{inflight_check_id}": {
      "get": {
        "description": "Retrieves the details of the inflight check.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "inflight_check_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InflightCheck"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses": {
      "post": {
        "description": "Adds a new ingress to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ingress"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ingress"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of ingresses.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of ingresses.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ingress"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates all ingresses",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Ingress"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingress"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses/{ingress_id}": {
      "delete": {
        "description": "Deletes the ingress.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "ingress_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the ingress.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "ingress_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ingress"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the ingress.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "ingress_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ingress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ingress"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/kubelet_config": {
      "delete": {
        "description": "Deletes the cluster KubeletConfig",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the KubeletConfig for a cluster",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubeletConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new cluster KubeletConfig",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubeletConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubeletConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the existing cluster KubeletConfig",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubeletConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubeletConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/kubelet_configs": {
      "post": {
        "description": "Adds a new KubeletConfig to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubeletConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubeletConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of KubeletConfigs for the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of KubeletConfigs.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/KubeletConfig"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/kubelet_configs/{kubelet_config_id}": {
      "delete": {
        "description": "Deletes the KubeletConfig specified by the id.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "kubelet_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the KubeletConfig specified by the id.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "kubelet_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubeletConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the KubeletConfig specified by the id.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "kubelet_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubeletConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubeletConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/limited_support_reasons": {
      "post": {
        "description": "Adds a new reason to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitedSupportReason"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitedSupportReason"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of reasons.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of template.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LimitedSupportReason"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/limited_support_reasons/{limited_support_reason_id}": {
      "delete": {
        "description": "Deletes the reason.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limited_support_reason_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the reason.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limited_support_reason_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitedSupportReason"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/logs": {
      "get": {
        "description": "Retrieves the list of log links.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of log links.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Log"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/logs/install": {
      "get": {
        "description": "Retrieves the details of the log.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "offset",
            "description": "Line offset to start logs from. if 0 retreive entire log.\nIf offset > #lines return an empty log.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tail",
            "description": "Returns the number of tail lines from the end of the log.\nIf there are no line breaks or the number of lines < tail\nreturn the entire log.\nEither 'tail' or 'offset' can be set. Not both. ",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/logs/uninstall": {
      "get": {
        "description": "Retrieves the details of the log.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "offset",
            "description": "Line offset to start logs from. if 0 retreive entire log.\nIf offset > #lines return an empty log.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tail",
            "description": "Returns the number of tail lines from the end of the log.\nIf there are no line breaks or the number of lines < tail\nreturn the entire log.\nEither 'tail' or 'offset' can be set. Not both. ",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools": {
      "post": {
        "description": "Adds a new machine pool to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachinePool"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachinePool"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of machine pools.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of machine pools.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MachinePool"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools/{machine_pool_id}": {
      "delete": {
        "description": "Deletes the machine pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "machine_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the machine pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "machine_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachinePool"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the machine pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "machine_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachinePool"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachinePool"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/alerts": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsInfo"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/cluster_operators": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterOperatorsInfo"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/cpu_total_by_node_roles_os": {
      "get": {
        "description": "Retrieves the metrics.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CPUTotalsNodeRoleOSMetricNode"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/nodes": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesInfo"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/socket_total_by_node_roles_os": {
      "get": {
        "description": "Retrieves the metrics.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocketTotalsNodeRoleOSMetricNode"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools": {
      "post": {
        "description": "Adds a new node pool to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodePool"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePool"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of node pools.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the node pools instead of\nthe names of the columns of a table. For example, in order to sort the node pools\ndescending by identifier the value should be:\n\n```sql\nid desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the node pools instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nnode pools with replicas of two the following is required:\n\n```sql\nreplicas = 2\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nnode pools that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of node pools.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NodePool"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools/{node_pool_id}": {
      "delete": {
        "description": "Deletes the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePool"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodePool"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePool"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools/{node_pool_id}/upgrade_policies": {
      "post": {
        "description": "Adds a new upgrade policy to the node pool of the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodePoolUpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of upgrade policies for the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of upgrade policy.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NodePoolUpgradePolicy"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools/{node_pool_id}/upgrade_policies/{node_pool_upgrade_policy_id}": {
      "delete": {
        "description": "Deletes the upgrade policy for the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the upgrade policy for the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the upgrade policy for the node pool.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "node_pool_upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodePoolUpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolUpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/provision_shard": {
      "delete": {
        "description": "Delete the provision shard.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the provision shard.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionShard"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the details of the provision shard.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisionShard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionShard"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/resources": {
      "get": {
        "description": "Retrieves a list of resources for a cluster in error state",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterResources"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/resources/live": {
      "get": {
        "description": "Retrieves currently available cluster resources",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterResources"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/status": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/sts_operator_roles": {
      "post": {
        "description": "Adds a new operator role to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperatorIAMRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorIAMRole"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of operator roles.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of operator roles.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OperatorIAMRole"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/sts_operator_roles/{operator_iam_role_id}": {
      "delete": {
        "description": "Deletes the operator role.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "operator_iam_role_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/sts_support_jump_role": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StsSupportJumpRole"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/tuning_configs": {
      "post": {
        "description": "Adds a new tuning config to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TuningConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TuningConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of tuning configs.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of tuning configs.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TuningConfig"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/tuning_configs/{tuning_config_id}": {
      "delete": {
        "description": "Deletes the tuning config.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tuning_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the tuning config.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tuning_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TuningConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the tuning config.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tuning_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TuningConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TuningConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies": {
      "post": {
        "description": "Adds a new upgrade policy to the cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of upgrade policies.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of upgrade policy.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UpgradePolicy"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}": {
      "delete": {
        "description": "Deletes the upgrade policy.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the upgrade policy.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the upgrade policy.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradePolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradePolicy"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}/state": {
      "get": {
        "description": "Retrieves the details of the upgrade policy state.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradePolicyState"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the upgrade policy state.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "upgrade_policy_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradePolicyState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradePolicyState"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/clusters/{cluster_id}/vpc": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudVPC"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/dns_domains": {
      "post": {
        "description": "Adds a DNS domain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DNSDomain"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DNSDomain"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the dns domain instead of\nthe names of the columns of a table. For example, in order to retrieve all the\ndns domains with a ID starting with `02a5` should be:\n\n```sql\nid like '02a5%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\ndns domains that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved a list of DNS domains.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DNSDomain"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/dns_domains/{dns_domain_id}": {
      "delete": {
        "description": "Delete the DNS domain.",
        "parameters": [
          {
            "name": "dns_domain_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the DNS domain.",
        "parameters": [
          {
            "name": "dns_domain_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DNSDomain"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/environment": {
      "get": {
        "description": "Retrieves the details of the environment.",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the environment.\n\nAttributes that can be updated are:\n\n- `last_upgrade_available_check`\n- `last_limited_support_check`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Environment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/events": {
      "post": {
        "description": "Adds a new event to be tracked. When sending a new event request,\nit gets tracked in Prometheus, Pendo, CloudWatch, or whichever\nanalytics client is configured as part of clusters service. This\nallows for reporting on events that happen outside of a regular API\nrequest, but are found to be useful for understanding customer\nneeds and possible blockers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/flavours": {
      "get": {
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the flavour instead of\nthe names of the columns of a table. For example, in order to sort the flavours\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the flavour instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nflavours with a name starting with `my`the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the flavours\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of flavours.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flavour"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/flavours/{flavour_id}": {
      "get": {
        "description": "Retrieves the details of the cluster flavour.",
        "parameters": [
          {
            "name": "flavour_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flavour"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the flavour.\n\nAttributes that can be updated are:\n\n- `aws.infra_volume`\n- `aws.infra_instance_type`\n- `gcp.infra_instance_type`",
        "parameters": [
          {
            "name": "flavour_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Flavour"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flavour"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp/wif_configs": {
      "post": {
        "description": "Provision a new wif_config resource and add it to the collection of wif_configs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WifConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WifConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of wif_configs",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the cluster instead of\nthe names of the columns of a table. For example, in order to sort the clusters\ndescending by region identifier the value should be:\n\n```sql\nregion.id desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the cluster instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nclusters with a name starting with `my` in the `us-east-1` region the value\nshould be:\n\n```sql\nname like 'my%' and region.id = 'us-east-1'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nwif_configs that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of wif_configs.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WifConfig"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp/wif_configs/{wif_config_id}": {
      "delete": {
        "description": "Deletes the wif_config.",
        "parameters": [
          {
            "name": "wif_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "dry_run",
            "description": "Dry run flag is used to check if the operation can be completed, but won't delete.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the WifConfig.",
        "parameters": [
          {
            "name": "wif_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WifConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp_inquiries/encryption_keys": {
      "post": {
        "description": "Retrieves the list of encryption keys.\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available regions\nof the provider.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of encryption keys.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EncryptionKey"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available regions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp_inquiries/key_rings": {
      "post": {
        "description": "Retrieves the list of available key rings of the cloud provider.\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available regions\nof the provider.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nkey rings of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of key rings.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/KeyRing"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nkey rings of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available key rings of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp_inquiries/machine_types": {
      "post": {
        "description": "Retrieves the list of machine types in the provided region.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of machine types.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MachineType"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp_inquiries/regions": {
      "post": {
        "description": "Retrieves the list of available regions of the cloud provider.\nIMPORTANT: This list doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available regions\nof the provider.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of regions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudRegion"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nregions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available regions of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/gcp_inquiries/vpcs": {
      "post": {
        "description": "Retrieves the list of available vpcs of the cloud provider for specific region.\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of available vpcs\nof the provider.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nvpcs of the provider.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudProviderData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud VPC.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CloudVPC"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nvpcs of the provider.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of available vpcs of the provider.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/limited_support_reason_templates": {
      "get": {
        "description": "Retrieves the list of templates.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of template.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LimitedSupportReasonTemplate"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/limited_support_reason_templates/{limited_support_reason_template_id}": {
      "get": {
        "description": "Retrieves the details of the template.",
        "parameters": [
          {
            "name": "limited_support_reason_template_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitedSupportReasonTemplate"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/load_balancer_quota_values": {
      "get": {
        "description": "Retrieves the list of Load Balancer Quota Values.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of values.",
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/machine_types": {
      "get": {
        "description": "Retrieves the list of machine types.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the machine type\ninstead of the names of the columns of a table. For example, in order to sort the\nmachine types descending by name identifier the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the machine type\ninstead of the names of the columns of a table. For example, in order to retrieve\nall the machine types with a name starting with `A` the value should be:\n\n```sql\nname like 'A%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the machine\ntypes that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud providers.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MachineType"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/machine_types/{machine_type_id}": {
      "get": {
        "description": "Retrieves the details of the machine type.",
        "parameters": [
          {
            "name": "machine_type_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineType"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/network_verifications": {
      "post": {
        "description": "Creates an entry for a network verification for each subnet supplied setting then to initial state.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkVerification"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkVerification"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/network_verifications/{network_verification_id}": {
      "get": {
        "description": "Retrieves the details of a subnet network verification.",
        "parameters": [
          {
            "name": "network_verification_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetNetworkVerification"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/oidc_configs": {
      "post": {
        "description": "Creates a hosting under Red Hat's S3 bucket for byo oidc configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of oidc configs.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of identity providers.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OidcConfig"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/oidc_configs/{oidc_config_id}": {
      "delete": {
        "description": "Deletes the OidcConfig.",
        "parameters": [
          {
            "name": "oidc_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of an OidcConfig.",
        "parameters": [
          {
            "name": "oidc_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates attributes of an OidcConfig.",
        "parameters": [
          {
            "name": "oidc_config_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OidcConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/pending_delete_clusters": {
      "get": {
        "description": "Retrieves the list of pending delete clusters.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the pending delete cluster instead of\nthe names of the columns of a table. For example, in order to sort the pending delete clusters\ndescending by creation timestamp (i.e. their deletion time) the value should be:\n\n```sql\ncreation_timestamp desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the pending delete cluster instead of\nthe names of the columns of a table. For example, in order to retrieve all the\npending delete clusters with creation time later than 2023-03-01T00:00:00Z the following is required:\n\n```sql\ncreation_timestamp > '2023-03-01T00:00:00Z'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\npending delete clusters that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of pending delete clusters.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PendingDeleteCluster"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/pending_delete_clusters/{pending_delete_cluster_id}": {
      "get": {
        "description": "Retrieves the details of the pending delete cluster.",
        "parameters": [
          {
            "name": "pending_delete_cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingDeleteCluster"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the pending delete cluster entry.",
        "parameters": [
          {
            "name": "pending_delete_cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingDeleteCluster"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingDeleteCluster"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/products": {
      "get": {
        "description": "Retrieves the list of products.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the product instead of\nthe names of the columns of a table. For example, in order to sort the products\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the product instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nproducts with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the products\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of products.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/products/{product_id}": {
      "get": {
        "description": "Retrieves the details of the product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/products/{product_id}/minimal_versions": {
      "get": {
        "description": "Retrieves the list of product minimal versions.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the product instead of\nthe names of the columns of a table. For example, in order to sort the products\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the product instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nproducts with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the products\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of product minimal versions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductMinimalVersion"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/products/{product_id}/minimal_versions/{minimal_version_id}": {
      "get": {
        "description": "Retrieves the details of the product minimal version.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "minimal_version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMinimalVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/products/{product_id}/technology_previews": {
      "get": {
        "description": "Retrieves the list of product technology previews.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the product instead of\nthe names of the columns of a table. For example, in order to sort the products\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the product instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nproducts with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the products\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of product technology previews.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductTechnologyPreview"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/products/{product_id}/technology_previews/{technology_preview_id}": {
      "get": {
        "description": "Retrieves the details of the product technology preview.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "technology_preview_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTechnologyPreview"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/provision_shards": {
      "post": {
        "description": "Adds a provision shard.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisionShard"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionShard"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the cluster instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nclusters with a name starting with `my` in the `us-east-1` region the value\nshould be:\n\n```sql\nname like 'my%' and region.id = 'us-east-1'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nprovision shards that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved a list of provision shards.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProvisionShard"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/provision_shards/{provision_shard_id}": {
      "delete": {
        "description": "Delete the provision shard.",
        "parameters": [
          {
            "name": "provision_shard_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the provision shard.",
        "parameters": [
          {
            "name": "provision_shard_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionShard"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the details of the provision shard.",
        "parameters": [
          {
            "name": "provision_shard_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisionShard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionShard"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/storage_quota_values": {
      "get": {
        "description": "Retrieves the list of Storage Quota Values.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of values.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StorageQuota"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/trusted_ip_addresses": {
      "get": {
        "description": "Retrieves the list of trusted ip addresses.",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of trusted ip addresses.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TrustedIp"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/version_gates": {
      "post": {
        "description": "Adds a new version gate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionGate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionGate"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves a list of version gates.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\nan SQL statement, but using the names of the attributes of the version gate instead of\nthe names of the columns of a table. For example, in order to sort the version gates\ndescending by identifier the value should be:\n\n```sql\nid desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the version gate instead of\nthe names of the columns of a table.\n\nIf the parameter isn't provided, or if the value is empty, then all the version gates\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n\nDefault value is `100`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of version gates.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VersionGate"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n\nDefault value is `100`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/version_gates/{version_gate_id}": {
      "delete": {
        "description": "Deletes the version gate.",
        "parameters": [
          {
            "name": "version_gate_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the version gate.",
        "parameters": [
          {
            "name": "version_gate_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionGate"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/versions": {
      "get": {
        "description": "Retrieves a list of versions.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the version instead of\nthe names of the columns of a table. For example, in order to sort the versions\ndescending by identifier the value should be:\n\n```sql\nid desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the version instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nversions that are enabled:\n\n```sql\nenabled = 't'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the versions\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n\nDefault value is `100`.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of versions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Version"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n\nDefault value is `100`.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clusters_mgmt/v1/versions/{version_id}": {
      "get": {
        "description": "Retrieves the details of the version.",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Metadata": {
        "description": "Version metadata.",
        "properties": {
          "server_version": {
            "description": "Version of the server.",
            "type": "string"
          }
        }
      },
      "AMIOverride": {
        "description": "AMIOverride specifies what Amazon Machine Image should be used for a particular product and region.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AMIOverride' if this is a complete object or 'AMIOverrideLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "ami": {
            "description": "AMI is the id of the Amazon Machine Image.",
            "type": "string"
          },
          "product": {
            "description": "Link to the product type.",
            "$ref": "#/components/schemas/Product"
          },
          "region": {
            "description": "Link to the cloud provider region.",
            "$ref": "#/components/schemas/CloudRegion"
          }
        }
      },
      "AWS": {
        "description": "_Amazon Web Services_ specific settings of a cluster.",
        "properties": {
          "kms_key_arn": {
            "description": "Customer Managed Key to encrypt EBS Volume",
            "type": "string"
          },
          "sts": {
            "description": "Contains the necessary attributes to support role-based authentication on AWS.",
            "$ref": "#/components/schemas/STS"
          },
          "access_key_id": {
            "description": "AWS access key identifier.",
            "type": "string"
          },
          "account_id": {
            "description": "AWS account identifier.",
            "type": "string"
          },
          "additional_allowed_principals": {
            "description": "Additional allowed principal ARNs to be added to the hosted control plane's VPC Endpoint Service.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additional_compute_security_group_ids": {
            "description": "Additional AWS Security Groups to be added to default worker (compute) machine pool.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additional_control_plane_security_group_ids": {
            "description": "Additional AWS Security Groups to be added to default control plane machine pool.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additional_infra_security_group_ids": {
            "description": "Additional AWS Security Groups to be added to default infra machine pool.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audit_log": {
            "description": "Audit log forwarding configuration",
            "$ref": "#/components/schemas/AuditLog"
          },
          "billing_account_id": {
            "description": "BillingAccountID is the account used for billing subscriptions purchased via the marketplace",
            "type": "string"
          },
          "ec2_metadata_http_tokens": {
            "description": "Which Ec2MetadataHttpTokens to use for metadata service interaction options for EC2 instances",
            "$ref": "#/components/schemas/Ec2MetadataHttpTokens"
          },
          "etcd_encryption": {
            "description": "Related etcd encryption configuration",
            "$ref": "#/components/schemas/AwsEtcdEncryption"
          },
          "private_hosted_zone_id": {
            "description": "ID of private hosted zone.",
            "type": "string"
          },
          "private_hosted_zone_role_arn": {
            "description": "Role ARN for private hosted zone.",
            "type": "string"
          },
          "private_link": {
            "description": "Sets cluster to be inaccessible externally.",
            "type": "boolean"
          },
          "private_link_configuration": {
            "description": "Manages additional configuration for Private Links.",
            "$ref": "#/components/schemas/PrivateLinkClusterConfiguration"
          },
          "secret_access_key": {
            "description": "AWS secret access key.",
            "type": "string"
          },
          "subnet_ids": {
            "description": "The subnet ids to be used when installing the cluster.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Optional keys and values that the installer will add as tags to all AWS resources it creates",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AWSFlavour": {
        "description": "Specification for different classes of nodes inside a flavour.",
        "properties": {
          "compute_instance_type": {
            "description": "AWS default instance type for the worker volume.\n\nUser can be overridden specifying in the cluster itself a type for compute node.",
            "type": "string"
          },
          "infra_instance_type": {
            "description": "AWS default instance type for the infra volume.",
            "type": "string"
          },
          "infra_volume": {
            "description": "Infra volume specification.",
            "$ref": "#/components/schemas/AWSVolume"
          },
          "master_instance_type": {
            "description": "AWS default instance type for the master volume.",
            "type": "string"
          },
          "master_volume": {
            "description": "Master volume specification.",
            "$ref": "#/components/schemas/AWSVolume"
          },
          "worker_volume": {
            "description": "Worker volume specification.",
            "$ref": "#/components/schemas/AWSVolume"
          }
        }
      },
      "AWSInfrastructureAccessRole": {
        "description": "A set of acces permissions for AWS resources",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AWSInfrastructureAccessRole' if this is a complete object or 'AWSInfrastructureAccessRoleLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "description": {
            "description": "Description of the role.",
            "type": "string"
          },
          "display_name": {
            "description": "Human friendly identifier of the role, for example `Read only`.",
            "type": "string"
          },
          "state": {
            "description": "State of the role.",
            "$ref": "#/components/schemas/AWSInfrastructureAccessRoleState"
          }
        }
      },
      "AWSInfrastructureAccessRoleGrant": {
        "description": "Representation of an AWS infrastructure access role grant.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AWSInfrastructureAccessRoleGrant' if this is a complete object or 'AWSInfrastructureAccessRoleGrantLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "console_url": {
            "description": "URL to switch to the role in AWS console.",
            "type": "string"
          },
          "role": {
            "description": "Link to AWS infrastructure access role.\nGrant must use a 'valid' role. ",
            "$ref": "#/components/schemas/AWSInfrastructureAccessRole"
          },
          "state": {
            "description": "State of the grant.",
            "$ref": "#/components/schemas/AWSInfrastructureAccessRoleGrantState"
          },
          "state_description": {
            "description": "Description of the state.\nWill be empty unless state is 'Failed'.",
            "type": "string"
          },
          "user_arn": {
            "description": "The user AWS IAM ARN we want to grant the role.",
            "type": "string"
          }
        }
      },
      "AWSInfrastructureAccessRoleGrantState": {
        "description": "State of an AWS infrastructure access role grant.",
        "type": "string",
        "enum": [
          "deleting",
          "failed",
          "pending",
          "ready",
          "removed"
        ]
      },
      "AWSInfrastructureAccessRoleState": {
        "description": "State of an AWS infrastructure access role.",
        "type": "string",
        "enum": [
          "invalid",
          "removed",
          "valid"
        ]
      },
      "AWSMachinePool": {
        "description": "Representation of aws machine pool specific parameters.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AWSMachinePool' if this is a complete object or 'AWSMachinePoolLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "additional_security_group_ids": {
            "description": "Additional AWS Security Groups to be added machine pool. Note that machine pools can only be worker node at the time.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availability_zone_types": {
            "description": "Associates nodepool availability zones with zone types (e.g. wavelength, local).",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "spot_market_options": {
            "description": "Use spot instances on this machine pool to reduce cost.",
            "$ref": "#/components/schemas/AWSSpotMarketOptions"
          },
          "subnet_outposts": {
            "description": "Associates nodepool subnets with AWS Outposts.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Optional keys and values that the machine pool provisioner will add as AWS tags to all AWS resources it creates.\n\nAWS tags must conform to the following standards:\n- Each resource may have a maximum of 25 tags\n- Tags beginning with \"aws:\" are reserved for system use and may not be set\n- Tag keys may be between 1 and 128 characters in length\n- Tag values may be between 0 and 256 characters in length\n- Tags may only contain letters, numbers, spaces, and the following characters: [_ . : / = + - @]",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AWSNodePool": {
        "description": "Representation of aws node pool specific parameters.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AWSNodePool' if this is a complete object or 'AWSNodePoolLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "additional_security_group_ids": {
            "description": "Additional AWS Security Groups to be added node pool.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availability_zone_types": {
            "description": "Associates nodepool availability zones with zone types (e.g. wavelength, local).",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ec2_metadata_http_tokens": {
            "description": "Which Ec2MetadataHttpTokens to use for metadata service interaction options for EC2 instances",
            "$ref": "#/components/schemas/Ec2MetadataHttpTokens"
          },
          "instance_profile": {
            "description": "InstanceProfile is the AWS EC2 instance profile, which is a container for an IAM role that the EC2 instance uses.",
            "type": "string"
          },
          "instance_type": {
            "description": "InstanceType is an ec2 instance type for node instances (e.g. m5.large).",
            "type": "string"
          },
          "root_volume": {
            "description": "AWS Volume specification to be used to set custom worker disk size",
            "$ref": "#/components/schemas/AWSVolume"
          },
          "subnet_outposts": {
            "description": "Associates nodepool subnets with AWS Outposts.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Optional keys and values that the installer will add as tags to all AWS resources it creates.\n\nAWS tags must conform to the following standards:\n- Each resource may have a maximum of 25 tags\n- Tags beginning with \"aws:\" are reserved for system use and may not be set\n- Tag keys may be between 1 and 128 characters in length\n- Tag values may be between 0 and 256 characters in length\n- Tags may only contain letters, numbers, spaces, and the following characters: [_ . : / = + - @]",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AWSSpotMarketOptions": {
        "description": "Spot market options for AWS machine pool.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AWSSpotMarketOptions' if this is a complete object or 'AWSSpotMarketOptionsLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "max_price": {
            "description": "The max price for spot instance. Optional.\nIf not set, use the on-demand price.",
            "type": "number",
            "format": "float"
          }
        }
      },
      "AWSVolume": {
        "description": "Holds settings for an AWS storage volume.",
        "properties": {
          "iops": {
            "description": "Volume provisioned IOPS.",
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "description": "Volume size in Gib.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AWSSTSAccountRole": {
        "description": "Representation of an sts account role for a rosa cluster",
        "properties": {
          "items": {
            "description": "The list of STS Roles for this Account Role",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AWSSTSRole"
            }
          },
          "prefix": {
            "description": "The Prefix for this Account Role",
            "type": "string"
          }
        }
      },
      "AWSSTSPolicy": {
        "description": "Representation of an sts policies for rosa cluster",
        "properties": {
          "arn": {
            "description": "The ARN of the managed policy",
            "type": "string"
          },
          "id": {
            "description": "Policy ID",
            "type": "string"
          },
          "details": {
            "description": "Policy Details",
            "type": "string"
          },
          "type": {
            "description": "Type of policy operator/account role",
            "type": "string"
          }
        }
      },
      "AWSSTSRole": {
        "description": "Representation of an sts role for a rosa cluster",
        "properties": {
          "hcpManagedPolicies": {
            "description": "Does this Role have HCP Managed Policies?",
            "type": "boolean"
          },
          "isAdmin": {
            "description": "Does this role have Admin permission?",
            "type": "boolean"
          },
          "managedPolicies": {
            "description": "Does this Role have Managed Policies?",
            "type": "boolean"
          },
          "arn": {
            "description": "The AWS ARN for this Role",
            "type": "string"
          },
          "type": {
            "description": "The type of this Role",
            "type": "string"
          },
          "roleVersion": {
            "description": "The Openshift Version for this Role",
            "type": "string"
          }
        }
      },
      "CCS": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'CCS' if this is a complete object or 'CCSLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "disable_scp_checks": {
            "description": "Indicates if cloud permissions checks are disabled,\nwhen attempting installation of the cluster.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Indicates if Customer Cloud Subscription is enabled on the cluster.",
            "type": "boolean"
          }
        }
      },
      "CPUTotalNodeRoleOSMetricNode": {
        "description": "Representation of information from telemetry about a the CPU capacity by node role and OS.",
        "properties": {
          "cpu_total": {
            "description": "The total CPU capacity of nodes with this set of roles and operating system.",
            "type": "number",
            "format": "float"
          },
          "node_roles": {
            "description": "Representation of the node role for a cluster.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operating_system": {
            "description": "The operating system.",
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CPUTotalsNodeRoleOSMetricNode": {
        "description": "Representation of information from telemetry about the CPU capacity by node\nrole and OS of a cluster.",
        "properties": {
          "cpu_totals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPUTotalNodeRoleOSMetricNode"
            }
          }
        }
      },
      "DNS": {
        "description": "DNS settings of the cluster.",
        "properties": {
          "base_domain": {
            "description": "Base DNS domain of the cluster.\n\nDuring the installation of the cluster it is necessary to create multiple DNS records.\nThey will be created as sub-domains of this domain. For example, if the domain_prefix of the\ncluster is `mycluster` and the base domain is `example.com` then the following DNS\nrecords will be created:\n\n```\nmycluster-api.example.com\nmycluster-etcd-0.example.com\nmycluster-etcd-1.example.com\nmycluster-etcd-3.example.com\n```\n\nThe exact number, type and names of the created DNS record depends on the characteristics\nof the cluster, and may be different for different versions of _OpenShift_. Please don't\nrely on them. For example, to find what is the URL of the Kubernetes API server of the\ncluster don't assume that it will be `mycluster-api.example.com`. Instead of that use\nthis API to retrieve the description of the cluster, and get it from the `api.url`\nattribute. For example, if the identifier of the cluster is `123` send a request like\nthis:\n\n```http\nGET /api/clusters_mgmt/v1/clusters/123 HTTP/1.1\n```\n\nThat will return a response like this, including the `api.url` attribute:\n\n```json\n{\n    \"kind\": \"Cluster\",\n    \"id\": \"123\",\n    \"href\": \"/api/clusters_mgmt/v1/clusters/123\",\n        \"api\": {\n        \"url\": \"https://mycluster-api.example.com:6443\"\n    },\n    ...\n}\n```\n\nWhen the cluster is created in Amazon Web Services it is necessary to create this base\nDNS domain in advance, using AWS Route53 (https://console.aws.amazon.com/route53).",
            "type": "string"
          }
        }
      },
      "DNSDomain": {
        "description": "Contains the properties of a DNS domain.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'DNSDomain' if this is a complete object or 'DNSDomainLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "cluster": {
            "description": "Link to the cluster that is registered with the DNS domain (optional).",
            "$ref": "#/components/schemas/ClusterLink"
          },
          "organization": {
            "description": "Link to the organization that reserved the DNS domain.",
            "$ref": "#/components/schemas/OrganizationLink"
          },
          "reserved_at_timestamp": {
            "description": "Date and time when the DNS domain was reserved.",
            "type": "string",
            "format": "date-time"
          },
          "user_defined": {
            "description": "Indicates if this dns domain is user defined.",
            "type": "boolean"
          }
        }
      },
      "GCP": {
        "description": "Google cloud platform settings of a cluster.",
        "properties": {
          "auth_uri": {
            "description": "GCP authentication uri",
            "type": "string"
          },
          "auth_provider_x509_cert_url": {
            "description": "GCP Authentication provider x509 certificate url",
            "type": "string"
          },
          "authentication": {
            "description": "GCP Authentication Method",
            "$ref": "#/components/schemas/GcpAuthentication"
          },
          "client_id": {
            "description": "GCP client identifier",
            "type": "string"
          },
          "client_x509_cert_url": {
            "description": "GCP client x509 certificate url",
            "type": "string"
          },
          "client_email": {
            "description": "GCP client email",
            "type": "string"
          },
          "private_key": {
            "description": "GCP private key",
            "type": "string"
          },
          "private_key_id": {
            "description": "GCP private key identifier",
            "type": "string"
          },
          "project_id": {
            "description": "GCP project identifier.",
            "type": "string"
          },
          "security": {
            "description": "GCP Security Settings",
            "$ref": "#/components/schemas/GcpSecurity"
          },
          "token_uri": {
            "description": "GCP token uri",
            "type": "string"
          },
          "type": {
            "description": "GCP the type of the service the key belongs to",
            "type": "string"
          }
        }
      },
      "GCPEncryptionKey": {
        "description": "GCP Encryption Key for CCS clusters.",
        "properties": {
          "kms_key_service_account": {
            "description": "Service account used to access the KMS key",
            "type": "string"
          },
          "key_location": {
            "description": "Location of the encryption key ring",
            "type": "string"
          },
          "key_name": {
            "description": "Name of the encryption key",
            "type": "string"
          },
          "key_ring": {
            "description": "Name of the key ring the encryption key is located on",
            "type": "string"
          }
        }
      },
      "GCPFlavour": {
        "description": "Specification for different classes of nodes inside a flavour.",
        "properties": {
          "compute_instance_type": {
            "description": "GCP default instance type for the worker volume.\n\nUser can be overridden specifying in the cluster itself a type for compute node.",
            "type": "string"
          },
          "infra_instance_type": {
            "description": "GCP default instance type for the infra volume.",
            "type": "string"
          },
          "infra_volume": {
            "description": "Infra volume specification.",
            "$ref": "#/components/schemas/GCPVolume"
          },
          "master_instance_type": {
            "description": "GCP default instance type for the master volume.",
            "type": "string"
          },
          "master_volume": {
            "description": "Master volume specification.",
            "$ref": "#/components/schemas/GCPVolume"
          },
          "worker_volume": {
            "description": "Worker volume specification.",
            "$ref": "#/components/schemas/GCPVolume"
          }
        }
      },
      "GCPImageOverride": {
        "description": "GcpImageOverride specifies what a GCP VM Image should be used for a particular product and billing model",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'GCPImageOverride' if this is a complete object or 'GCPImageOverrideLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "billing_model": {
            "description": "Link to the billing model.",
            "$ref": "#/components/schemas/BillingModelItem"
          },
          "image_id": {
            "description": "ImageID is the id of the Google Cloud Platform image.",
            "type": "string"
          },
          "product": {
            "description": "Link to the product type.",
            "$ref": "#/components/schemas/Product"
          },
          "project_id": {
            "description": "ProjectID is the id of the Google Cloud Platform project that hosts the image.",
            "type": "string"
          }
        }
      },
      "GCPNetwork": {
        "description": "GCP Network configuration of a cluster.",
        "properties": {
          "vpc_name": {
            "description": "VPC mame used by the cluster.",
            "type": "string"
          },
          "vpc_project_id": {
            "description": "The name of the host project where the shared VPC exists.",
            "type": "string"
          },
          "compute_subnet": {
            "description": "Compute subnet used by the cluster.",
            "type": "string"
          },
          "control_plane_subnet": {
            "description": "Control plane subnet used by the cluster.",
            "type": "string"
          }
        }
      },
      "GCPVolume": {
        "description": "Holds settings for an GCP storage volume.",
        "properties": {
          "size": {
            "description": "Volume size in Gib.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "HTPasswdIdentityProvider": {
        "description": "Details for `htpasswd` identity providers.",
        "properties": {
          "password": {
            "description": "Password to be used in the _HTPasswd_ data file.",
            "type": "string"
          },
          "username": {
            "description": "Username to be used in the _HTPasswd_ data file.",
            "type": "string"
          },
          "users": {
            "description": "Link to the collection of _HTPasswd_ users.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTPasswdUser"
            }
          }
        }
      },
      "HTPasswdUser": {
        "properties": {
          "id": {
            "description": "ID for a secondary user in the _HTPasswd_ data file.",
            "type": "string"
          },
          "hashed_password": {
            "description": "HTPasswd Hashed Password for a user in the _HTPasswd_ data file.\nThe value of this field is set as-is in the _HTPasswd_ data file for the HTPasswd IDP",
            "type": "string"
          },
          "password": {
            "description": "Password in plain-text for a  user in the _HTPasswd_ data file.\nThe value of this field is hashed before setting it in the  _HTPasswd_ data file for the HTPasswd IDP",
            "type": "string"
          },
          "username": {
            "description": "Username for a secondary user in the _HTPasswd_ data file.",
            "type": "string"
          }
        }
      },
      "LDAPAttributes": {
        "description": "LDAP attributes used to configure the LDAP identity provider.",
        "properties": {
          "id": {
            "description": "List of attributes to use as the identity.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "description": "List of attributes to use as the mail address.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "List of attributes to use as the display name.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preferred_username": {
            "description": "List of attributes to use as the preferred user name when provisioning a user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LDAPIdentityProvider": {
        "description": "Details for `ldap` identity providers.",
        "properties": {
          "ca": {
            "description": "Certificate bundle to use to validate server certificates for the configured URL.",
            "type": "string"
          },
          "url": {
            "description": "An https://tools.ietf.org/html/rfc2255[RFC 2255] URL which specifies the LDAP host and\nsearch parameters to use.",
            "type": "string"
          },
          "attributes": {
            "description": "LDAP attributes used to configure the provider.",
            "$ref": "#/components/schemas/LDAPAttributes"
          },
          "bind_dn": {
            "description": "Optional distinguished name to use to bind during the search phase.",
            "type": "string"
          },
          "bind_password": {
            "description": "Optional password to use to bind during the search phase.",
            "type": "string"
          },
          "insecure": {
            "description": "When `true` no TLS connection is made to the server. When `false` `ldaps://...` URLs\nconnect using TLS and `ldap://...` are upgraded to TLS.",
            "type": "boolean"
          }
        }
      },
      "STS": {
        "description": "Contains the necessary attributes to support role-based authentication on AWS.",
        "properties": {
          "oidc_endpoint_url": {
            "description": "URL of the location where OIDC configuration and keys are available",
            "type": "string"
          },
          "auto_mode": {
            "description": "Auto creation mode for cluster - OCM will create the operator roles and OIDC provider. false by default.",
            "type": "boolean"
          },
          "enabled": {
            "description": "If STS is enabled or disabled",
            "type": "boolean"
          },
          "external_id": {
            "description": "Optional unique identifier when assuming role in another account",
            "type": "string"
          },
          "instance_iam_roles": {
            "description": "Instance IAM roles to use for the instance profiles of the master and worker instances",
            "$ref": "#/components/schemas/InstanceIAMRoles"
          },
          "managed_policies": {
            "description": "If true, cluster account and operator roles have managed policies attached.",
            "type": "boolean"
          },
          "oidc_config": {
            "description": "Registered Oidc Config, if available holds information related to the oidc config.",
            "$ref": "#/components/schemas/OidcConfig"
          },
          "operator_iam_roles": {
            "description": "List of roles necessary to access the AWS resources of the various operators used during installation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatorIAMRole"
            }
          },
          "operator_role_prefix": {
            "description": "Optional user provided prefix for operator roles.",
            "type": "string"
          },
          "permission_boundary": {
            "description": "Optional user provided permission boundary.",
            "type": "string"
          },
          "role_arn": {
            "description": "ARN of the AWS role to assume when installing the cluster",
            "type": "string"
          },
          "support_role_arn": {
            "description": "ARN of the AWS role used by SREs to access the cluster AWS account in order to provide support",
            "type": "string"
          }
        }
      },
      "STSCredentialRequest": {
        "description": "Representation of an credRequest",
        "properties": {
          "name": {
            "description": "Name of CredRequest",
            "type": "string"
          },
          "operator": {
            "description": "Operator Details",
            "$ref": "#/components/schemas/STSOperator"
          }
        }
      },
      "STSOperator": {
        "description": "Representation of an sts operator",
        "properties": {
          "max_version": {
            "description": "Maximum ocp version supported",
            "type": "string"
          },
          "min_version": {
            "description": "Minimum ocp version supported",
            "type": "string"
          },
          "name": {
            "description": "Operator Name",
            "type": "string"
          },
          "namespace": {
            "description": "Operator Namespace",
            "type": "string"
          },
          "service_accounts": {
            "description": "Service Accounts",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddOn": {
        "description": "Representation of an add-on that can be installed in a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOn' if this is a complete object or 'AddOnLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "common_annotations": {
            "description": "Common annotations to be applied to all resources created by this addon.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "common_labels": {
            "description": "Common labels to be applied to all resources created by this addon.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "config": {
            "description": "Additional configs to be used by the addon once its installed in the cluster.",
            "$ref": "#/components/schemas/AddOnConfig"
          },
          "credentials_requests": {
            "description": "List of credentials requests to authenticate operators to access cloud resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialRequest"
            }
          },
          "description": {
            "description": "Description of the add-on.",
            "type": "string"
          },
          "docs_link": {
            "description": "Link to documentation about the add-on.",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates if this add-on can be added to clusters.",
            "type": "boolean"
          },
          "has_external_resources": {
            "description": "Indicates if this add-on has external resources associated with it",
            "type": "boolean"
          },
          "hidden": {
            "description": "Indicates if this add-on is hidden.",
            "type": "boolean"
          },
          "icon": {
            "description": "Base64-encoded icon representing an add-on. The icon should be in PNG format.",
            "type": "string"
          },
          "install_mode": {
            "description": "The mode in which the addon is deployed.",
            "$ref": "#/components/schemas/AddOnInstallMode"
          },
          "label": {
            "description": "Label used to attach to a cluster deployment when add-on is installed.",
            "type": "string"
          },
          "managed_service": {
            "description": "Indicates if add-on is part of a managed service",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the add-on.",
            "type": "string"
          },
          "namespaces": {
            "description": "Namespaces which are required by this addon.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnNamespace"
            }
          },
          "operator_name": {
            "description": "The name of the operator installed by this add-on.",
            "type": "string"
          },
          "parameters": {
            "description": "List of parameters for this add-on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnParameter"
            }
          },
          "requirements": {
            "description": "List of requirements for this add-on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnRequirement"
            }
          },
          "resource_cost": {
            "description": "Used to determine how many units of quota an add-on consumes per resource name.",
            "type": "number",
            "format": "float"
          },
          "resource_name": {
            "description": "Used to determine from where to reserve quota for this add-on.",
            "type": "string"
          },
          "sub_operators": {
            "description": "List of sub operators for this add-on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnSubOperator"
            }
          },
          "target_namespace": {
            "description": "The namespace in which the addon CRD exists.",
            "type": "string"
          },
          "version": {
            "description": "Link to the current default version of this add-on.",
            "$ref": "#/components/schemas/AddOnVersion"
          }
        }
      },
      "AddOnConfig": {
        "description": "Representation of an add-on config.\nThe attributes under it are to be used by the addon once its installed in the cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnConfig' if this is a complete object or 'AddOnConfigLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "add_on_environment_variables": {
            "description": "List of environment variables for the addon",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnEnvironmentVariable"
            }
          },
          "secret_propagations": {
            "description": "List of secret propagations for the addon",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnSecretPropagation"
            }
          }
        }
      },
      "AddOnEnvironmentVariable": {
        "description": "Representation of an add-on env object.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnEnvironmentVariable' if this is a complete object or 'AddOnEnvironmentVariableLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "name": {
            "description": "Name of the env object.",
            "type": "string"
          },
          "value": {
            "description": "Value of the env object.",
            "type": "string"
          }
        }
      },
      "AddOnInstallMode": {
        "description": "Representation of an add-on InstallMode field.",
        "type": "string",
        "enum": [
          "all_namespaces",
          "own_namespace"
        ]
      },
      "AddOnInstallation": {
        "description": "Representation of an add-on installation in a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnInstallation' if this is a complete object or 'AddOnInstallationLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "addon": {
            "description": "Link to add-on attached to this cluster.",
            "$ref": "#/components/schemas/AddOn"
          },
          "addon_version": {
            "description": "Link to the installed version of this add-on.",
            "$ref": "#/components/schemas/AddOnVersion"
          },
          "billing": {
            "description": "Billing details for add-on installation resource ",
            "$ref": "#/components/schemas/AddOnInstallationBilling"
          },
          "creation_timestamp": {
            "description": "Date and time when the add-on was initially installed in the cluster.",
            "type": "string",
            "format": "date-time"
          },
          "operator_version": {
            "description": "Version of the operator installed by the add-on.",
            "type": "string"
          },
          "parameters": {
            "description": "List of add-on parameters for this add-on installation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnInstallationParameter"
            }
          },
          "state": {
            "description": "Overall state of the add-on installation.",
            "$ref": "#/components/schemas/AddOnInstallationState"
          },
          "state_description": {
            "description": "Reason for the current State.",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "Date and time when the add-on installation information was last updated.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddOnInstallationBilling": {
        "description": "Representation of an add-on installation billing.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnInstallationBilling' if this is a complete object or 'AddOnInstallationBillingLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "billing_marketplace_account": {
            "description": "Account ID for billing market place",
            "type": "string"
          },
          "billing_model": {
            "description": "Billing Model for addon resources",
            "$ref": "#/components/schemas/BillingModel"
          }
        }
      },
      "AddOnInstallationParameter": {
        "description": "Representation of an add-on installation parameter.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnInstallationParameter' if this is a complete object or 'AddOnInstallationParameterLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "value": {
            "description": "Value of the parameter.",
            "type": "string"
          }
        }
      },
      "AddOnInstallationState": {
        "description": "Representation of an add-on installation State field.",
        "type": "string",
        "enum": [
          "deleting",
          "failed",
          "installing",
          "pending",
          "ready"
        ]
      },
      "AddOnNamespace": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnNamespace' if this is a complete object or 'AddOnNamespaceLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "annotations": {
            "description": "Annotations to be applied to this namespace.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "labels": {
            "description": "Labels to be applied to this namespace.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "description": "Name of the namespace.",
            "type": "string"
          }
        }
      },
      "AddOnParameter": {
        "description": "Representation of an add-on parameter.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnParameter' if this is a complete object or 'AddOnParameterLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "addon": {
            "description": "Link to add-on.",
            "$ref": "#/components/schemas/AddOn"
          },
          "conditions": {
            "description": "Conditions in which this parameter is valid for",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnRequirement"
            }
          },
          "default_value": {
            "description": "Indicates the value default for the add-on parameter.",
            "type": "string"
          },
          "description": {
            "description": "Description of the add-on parameter.",
            "type": "string"
          },
          "editable": {
            "description": "Indicates if this parameter can be edited after creation.",
            "type": "boolean"
          },
          "editable_direction": {
            "description": "Restricts if the parameter can be upscaled/downscaled\nExpected values are \"up\", \"down\", or \"\" (no restriction).",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates if this parameter is enabled for the add-on.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the add-on parameter.",
            "type": "string"
          },
          "options": {
            "description": "List of options for the add-on parameter value.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnParameterOption"
            }
          },
          "required": {
            "description": "Indicates if this parameter is required by the add-on.",
            "type": "boolean"
          },
          "validation": {
            "description": "Validation rule for the add-on parameter.",
            "type": "string"
          },
          "validation_err_msg": {
            "description": "Error message to return should the parameter be invalid.",
            "type": "string"
          },
          "value_type": {
            "description": "Type of value of the add-on parameter.",
            "type": "string"
          }
        }
      },
      "AddOnParameterOption": {
        "description": "Representation of an add-on parameter option.",
        "properties": {
          "name": {
            "description": "Name of the add-on parameter option.",
            "type": "string"
          },
          "rank": {
            "description": "Rank of option to be used in cases where editable direction should be restricted.",
            "type": "integer",
            "format": "int32"
          },
          "requirements": {
            "description": "List of add-on requirements for this parameter option.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnRequirement"
            }
          },
          "value": {
            "description": "Value of the add-on parameter option.",
            "type": "string"
          }
        }
      },
      "AddOnRequirement": {
        "description": "Representation of an add-on requirement.",
        "properties": {
          "id": {
            "description": "ID of the add-on requirement.",
            "type": "string"
          },
          "data": {
            "description": "Data for the add-on requirement.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "enabled": {
            "description": "Indicates if this requirement is enabled for the add-on.",
            "type": "boolean"
          },
          "resource": {
            "description": "Type of resource of the add-on requirement.",
            "type": "string"
          },
          "status": {
            "description": "Optional cluster specific status for the add-on.",
            "$ref": "#/components/schemas/AddOnRequirementStatus"
          }
        }
      },
      "AddOnRequirementStatus": {
        "description": "Representation of an add-on requirement status.",
        "properties": {
          "error_msgs": {
            "description": "Error messages detailing reasons for unfulfilled requirements.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fulfilled": {
            "description": "Indicates if this requirement is fulfilled.",
            "type": "boolean"
          }
        }
      },
      "AddOnSecretPropagation": {
        "description": "Representation of an addon secret propagation",
        "properties": {
          "id": {
            "description": "ID of the secret propagation",
            "type": "string"
          },
          "destination_secret": {
            "description": "DestinationSecret is location of the secret to be added",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates is this secret propagation is enabled for the addon",
            "type": "boolean"
          },
          "source_secret": {
            "description": "SourceSecret is location of the source secret",
            "type": "string"
          }
        }
      },
      "AddOnSubOperator": {
        "description": "Representation of an add-on sub operator. A sub operator is an operator\nwho's life cycle is controlled by the add-on umbrella operator. ",
        "properties": {
          "enabled": {
            "description": "Indicates if the sub operator is enabled for the add-on",
            "type": "boolean"
          },
          "operator_name": {
            "description": "Name of the add-on sub operator",
            "type": "string"
          },
          "operator_namespace": {
            "description": "Namespace of the add-on sub operator",
            "type": "string"
          }
        }
      },
      "AddOnVersion": {
        "description": "Representation of an add-on version.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddOnVersion' if this is a complete object or 'AddOnVersionLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "additional_catalog_sources": {
            "description": "Additional catalog sources associated with this addon version",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalCatalogSource"
            }
          },
          "available_upgrades": {
            "description": "AvailableUpgrades is the list of versions this version can be upgraded to.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "description": "The specific addon catalog source channel of packages",
            "type": "string"
          },
          "config": {
            "description": "Additional configs to be used by the addon once its installed in the cluster.",
            "$ref": "#/components/schemas/AddOnConfig"
          },
          "enabled": {
            "description": "Indicates if this add-on version can be added to clusters.",
            "type": "boolean"
          },
          "package_image": {
            "description": "The package image for this addon version",
            "type": "string"
          },
          "parameters": {
            "description": "List of parameters for this add-on version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnParameter"
            }
          },
          "pull_secret_name": {
            "description": "The pull secret name used for this addon version.",
            "type": "string"
          },
          "requirements": {
            "description": "List of requirements for this add-on version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnRequirement"
            }
          },
          "source_image": {
            "description": "The catalog source image for this add-on version.",
            "type": "string"
          },
          "sub_operators": {
            "description": "List of sub operators for this add-on version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnSubOperator"
            }
          }
        }
      },
      "AdditionalCatalogSource": {
        "description": "Representation of an addon catalog source object used by addon versions.",
        "properties": {
          "id": {
            "description": "ID of the additional catalog source",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates is this additional catalog source is enabled for the addon",
            "type": "boolean"
          },
          "image": {
            "description": "Image of the additional catalog source.",
            "type": "string"
          },
          "name": {
            "description": "Name of the additional catalog source.",
            "type": "string"
          }
        }
      },
      "AddonUpgradePolicy": {
        "description": "Representation of an upgrade policy that can be set for a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddonUpgradePolicy' if this is a complete object or 'AddonUpgradePolicyLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "addon_id": {
            "description": "Addon ID this upgrade policy is defined for",
            "type": "string"
          },
          "cluster_id": {
            "description": "Cluster ID this upgrade policy is defined for.",
            "type": "string"
          },
          "next_run": {
            "description": "Next time the upgrade should run.",
            "type": "string",
            "format": "date-time"
          },
          "schedule": {
            "description": "Schedule cron expression that defines automatic upgrade scheduling.",
            "type": "string"
          },
          "schedule_type": {
            "description": "Schedule type can be either \"manual\" (single execution) or \"automatic\" (re-occurring).",
            "type": "string"
          },
          "upgrade_type": {
            "description": "Upgrade type specify the type of the upgrade. Must be \"ADDON\".",
            "type": "string"
          },
          "version": {
            "description": "Version is the desired upgrade version.",
            "type": "string"
          }
        }
      },
      "AddonUpgradePolicyState": {
        "description": "Representation of an addon upgrade policy state that that is set for a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddonUpgradePolicyState' if this is a complete object or 'AddonUpgradePolicyStateLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "description": {
            "description": "Description of the state.",
            "type": "string"
          },
          "value": {
            "description": "State value can be 'pending', 'scheduled', 'cancelled', 'started', 'delayed',\n'failed' or 'completed'.",
            "$ref": "#/components/schemas/UpgradePolicyStateValue"
          }
        }
      },
      "AdminCredentials": {
        "description": "Temporary administrator credentials generated during the installation of the\ncluster.",
        "properties": {
          "password": {
            "description": "Cluster administrator password.",
            "type": "string"
          },
          "user": {
            "description": "Cluster administrator user name.",
            "type": "string"
          }
        }
      },
      "AlertInfo": {
        "description": "Provides information about a single alert firing on the cluster.",
        "properties": {
          "name": {
            "description": "The alert name. Multiple alerts with same name are possible.",
            "type": "string"
          },
          "severity": {
            "description": "The alert severity.",
            "$ref": "#/components/schemas/AlertSeverity"
          }
        }
      },
      "AlertSeverity": {
        "description": "Severity of a cluster alert received via telemetry.",
        "type": "string",
        "enum": [
          "critical",
          "none",
          "warning"
        ]
      },
      "AlertsInfo": {
        "description": "Provides information about the alerts firing on the cluster.",
        "properties": {
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertInfo"
            }
          }
        }
      },
      "AuditLog": {
        "description": "Contains the necessary attributes to support audit log forwarding",
        "properties": {
          "role_arn": {
            "description": "ARN of the CloudWatch audit log forwarding role",
            "type": "string"
          }
        }
      },
      "AutoscalerResourceLimits": {
        "properties": {
          "gpus": {
            "description": "Minimum and maximum number of different GPUs in cluster, in the format <gpu_type>:<min>:<max>.\nCluster autoscaler will not scale the cluster beyond these numbers. Can be passed multiple times.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoscalerResourceLimitsGPULimit"
            }
          },
          "cores": {
            "description": "Minimum and maximum number of cores in cluster, in the format <min>:<max>.\nCluster autoscaler will not scale the cluster beyond these numbers.",
            "$ref": "#/components/schemas/ResourceRange"
          },
          "max_nodes_total": {
            "description": "Maximum number of nodes in all node groups.\nCluster autoscaler will not grow the cluster beyond this number.",
            "type": "integer",
            "format": "int32"
          },
          "memory": {
            "description": "Minimum and maximum number of gigabytes of memory in cluster, in the format <min>:<max>.\nCluster autoscaler will not scale the cluster beyond these numbers.",
            "$ref": "#/components/schemas/ResourceRange"
          }
        }
      },
      "AutoscalerResourceLimitsGPULimit": {
        "properties": {
          "range": {
            "$ref": "#/components/schemas/ResourceRange"
          },
          "type": {
            "description": "The type of GPU to associate with the minimum and maximum limits.\nThis value is used by the Cluster Autoscaler to identify Nodes that will have GPU capacity by searching\nfor it as a label value on the Node objects. For example, Nodes that carry the label key\n`cluster-api/accelerator` with the label value being the same as the Type field will be counted towards\nthe resource limits by the Cluster Autoscaler.",
            "type": "string"
          }
        }
      },
      "AutoscalerScaleDownConfig": {
        "properties": {
          "delay_after_add": {
            "description": "How long after scale up that scale down evaluation resumes.",
            "type": "string"
          },
          "delay_after_delete": {
            "description": "How long after node deletion that scale down evaluation resumes, defaults to scan-interval.",
            "type": "string"
          },
          "delay_after_failure": {
            "description": "How long after scale down failure that scale down evaluation resumes.",
            "type": "string"
          },
          "enabled": {
            "description": "Should cluster-autoscaler scale down the cluster.",
            "type": "boolean"
          },
          "unneeded_time": {
            "description": "How long a node should be unneeded before it is eligible for scale down.",
            "type": "string"
          },
          "utilization_threshold": {
            "description": "Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down.",
            "type": "string"
          }
        }
      },
      "AwsEtcdEncryption": {
        "description": "Contains the necessary attributes to support etcd encryption for AWS based clusters.",
        "properties": {
          "kms_key_arn": {
            "description": "ARN of the KMS to be used for the etcd encryption",
            "type": "string"
          }
        }
      },
      "Azure": {
        "description": "Microsoft Azure settings of a cluster.",
        "properties": {
          "managed_resource_group_name": {
            "description": "[Required] The name of the Azure Resource Group where the Azure Resources related\nto the cluster are created. The Azure Resource Group is created with the given\nvalue, within the Azure Subscription `subscription_id` of the cluster.\n`managed_resource_group_name` cannot be equal to the value of `managed_resource_group`.\n`managed_resource_group_name` is located in the same Azure location as the\ncluster's region.\nNot to be confused with `resource_group_name`, which is the Azure Resource Group Name\nwhere the own Azure Resource associated to the cluster resides.",
            "type": "string"
          },
          "network_security_group_resource_id": {
            "description": "[Required] The Azure Resource ID of a pre-existing\nAzure Network Security Group.\nThe Network Security Group specified in network_security_group_resource_id\nmust already be associated to the Azure Subnet `subnet_resource_id`.\nIt is the Azure Network Security Group associated to the cluster's subnet\nspecified in `subnet_resource_id`.\n`network_security_group_resource_id` must be located in the same Azure\nlocation as the cluster's region.\nThe Azure Subscription specified as part of\n`network_security_group_resource_id` must be located in the same Azure\nSubscription as `subscription_id`.\nThe Azure Resource Group Name specified as part of `network_security_group_resource_id`\nmust belong to the Azure Subscription `subscription_id`, and in the same\nAzure location as the cluster's region.\nThe Azure Resource Group Name specified as part of `network_security_group_resource_id`\nmust be a different Resource Group Name than the one specified in\n`managed_resource_group_name`.\nThe Azure Resource Group Name specified as part of `network_security_group_resource_id`\ncan be the same, or a different one than the one specified in\n`resource_group_name`.",
            "type": "string"
          },
          "resource_group_name": {
            "description": "[Required] The Azure Resource Group Name of the cluster. It must be within `subscription_id`\nof the cluster. `resource_group_name` is located in the same Azure location\nas the cluster's region.",
            "type": "string"
          },
          "resource_name": {
            "description": "[Required] The Azure Resource Name of the cluster. It must be within the\nAzure Resource Group Name `resource_group_name`.\n`resource_name` is located in the same Azure location as the cluster's region.",
            "type": "string"
          },
          "subnet_resource_id": {
            "description": "[Required] The Azure Resource ID of a pre-existing Azure\nSubnet. It is an Azure Subnet used for the Data Plane of the cluster.\n`subnet_resource_id` must be located in the same Azure location as the\ncluster's region.\nThe Azure Subscription specified as part of the `subnet_resource_id`\nmust be located in the same Azure Subscription as `subscription_id`.\nThe Azure Resource Group Name specified as part of `subnet_resource_id`\nmust belong to the Azure Subscription `subscription_id`, and in the same\nAzure location as the cluster's region.\nThe Azure Resource Group Name specified as part of `subnet_resource_id`\nmust be a different Resource Group Name than the one specified in\n`managed_resource_group_name`.\nThe Azure Resource Group Name specified as part of the `subnet_resource_id`\ncan be the same, or a different one than the one specified in\n`resource_group_name`.",
            "type": "string"
          },
          "subscription_id": {
            "description": "[Required] The Azure Subscription ID associated with the cluster. It must belong to\nthe Microsoft Entra Tenant ID `tenant_id`.",
            "type": "string"
          },
          "tenant_id": {
            "description": "[Required] The Microsoft Entra Tenant ID where the cluster belongs.",
            "type": "string"
          }
        }
      },
      "AzureNodePool": {
        "description": "Representation of azure node pool specific parameters.",
        "properties": {
          "os_disk_size_gibibytes": {
            "description": "The size in GiB to assign to the OS disks of the\nNodes in the Node Pool. The property\nis the number of bytes x 1024^3.\nIf not specified, OS disk size is 30 GiB.",
            "type": "integer",
            "format": "int32"
          },
          "os_disk_storage_account_type": {
            "description": "The disk storage account type to use for the OS disks of the Nodes in the\nNode Pool. Valid values are:\n* Standard_LRS: HDD\n* StandardSSD_LRS: Standard SSD\n* Premium_LRS: Premium SDD\n* UltraSSD_LRS: Ultra SDD\n\nIf not specified, `Premium_LRS` is used.",
            "type": "string"
          },
          "vm_size": {
            "description": "The Azure Virtual Machine size identifier used for the\nNodes of the Node Pool.\nAvailability of VM sizes are dependent on the Azure Location\nof the parent Cluster.\nRequired during creation.",
            "type": "string"
          },
          "ephemeral_os_disk_enabled": {
            "description": "Enables Ephemeral OS Disks for the Nodes in the Node Pool.\nIf not specified, no Ephemeral OS Disks are used.",
            "type": "boolean"
          },
          "resource_name": {
            "description": "ResourceName is the Azure Resource Name of the NodePool.\nResourceName must be within the Azure Resource Group Name of the parent\nCluster it belongs to.\nResourceName must be located in the same Azure Location as the parent\nCluster it belongs to.\nResourceName must be located in the same Azure Subscription as the parent\nCluster it belongs to.\nResourceName must belong to the same Microsoft Entra Tenant ID as the parent\nCluster it belongs to.\nRequired during creation.\nImmutable.",
            "type": "string"
          }
        }
      },
      "BillingModel": {
        "description": "Billing model for cluster resources.",
        "type": "string",
        "enum": [
          "marketplace",
          "marketplace-aws",
          "marketplace-gcp",
          "marketplace-rhm",
          "marketplace-azure",
          "standard"
        ]
      },
      "BillingModelItem": {
        "description": "BillingModelItem represents a billing model",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'BillingModelItem' if this is a complete object or 'BillingModelItemLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "billing_model_type": {
            "description": "BillingModelType is the type of the BillingModel. e.g. standard, marketplace.",
            "type": "string"
          },
          "description": {
            "description": "Single line description of the billing model.",
            "type": "string"
          },
          "display_name": {
            "description": "User friendly display name of the billing model.",
            "type": "string"
          },
          "marketplace": {
            "description": "Indicates the marketplace of the billing model. e.g. gcp, aws, etc.",
            "type": "string"
          }
        }
      },
      "BreakGlassCredential": {
        "description": "Representation of a break glass credential.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'BreakGlassCredential' if this is a complete object or 'BreakGlassCredentialLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "expiration_timestamp": {
            "description": "ExpirationTimestamp is the date and time when the credential will expire.",
            "type": "string",
            "format": "date-time"
          },
          "kubeconfig": {
            "description": "Kubeconfig is the generated kubeconfig for this credential. It is only stored in memory",
            "type": "string"
          },
          "revocation_timestamp": {
            "description": "RevocationTimestamp is the date and time when the credential has been revoked.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Status is the status of this credential",
            "$ref": "#/components/schemas/BreakGlassCredentialStatus"
          },
          "username": {
            "description": "Username is the user which will be used for this credential.",
            "type": "string"
          }
        }
      },
      "BreakGlassCredentialStatus": {
        "description": "Status of the break glass credential.",
        "type": "string",
        "enum": [
          "awaiting_revocation",
          "created",
          "expired",
          "failed",
          "issued",
          "revoked"
        ]
      },
      "ByoOidc": {
        "description": "ByoOidc configuration.",
        "properties": {
          "enabled": {
            "description": "Boolean flag indicating if the cluster should be creating using _ByoOidc_.\n\nBy default this is `false`.\n\nTo enable it the cluster needs to be ROSA cluster and the organization of the user needs\nto have the `byo-oidc` feature toggle enabled.",
            "type": "boolean"
          }
        }
      },
      "ClientComponent": {
        "description": "The reference of a component that will consume the client configuration.",
        "properties": {
          "name": {
            "description": "The name of the component.",
            "type": "string"
          },
          "namespace": {
            "description": "The namespace of the component.",
            "type": "string"
          }
        }
      },
      "CloudVPC": {
        "description": "Description of a cloud provider virtual private cloud.",
        "properties": {
          "aws_security_groups": {
            "description": "List of AWS security groups with details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroup"
            }
          },
          "aws_subnets": {
            "description": "List of AWS subnetworks with details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subnetwork"
            }
          },
          "cidr_block": {
            "description": "CIDR block of the virtual private cloud.",
            "type": "string"
          },
          "id": {
            "description": "ID of virtual private cloud.",
            "type": "string"
          },
          "name": {
            "description": "Name of virtual private cloud according to its `Name` tag on AWS.",
            "type": "string"
          },
          "red_hat_managed": {
            "description": "If the resource is RH managed.",
            "type": "boolean"
          },
          "subnets": {
            "description": "List of subnets used by the virtual private cloud.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CloudProvider": {
        "description": "Cloud provider.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'CloudProvider' if this is a complete object or 'CloudProviderLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "display_name": {
            "description": "Name of the cloud provider for display purposes. It can contain any characters,\nincluding spaces.",
            "type": "string"
          },
          "name": {
            "description": "Human friendly identifier of the cloud provider, for example `aws`.",
            "type": "string"
          },
          "regions": {
            "description": "(optional) Provider's regions - only included when listing providers with `fetchRegions=true`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudRegion"
            }
          }
        }
      },
      "CloudProviderData": {
        "description": "Description of a cloud provider data used for cloud provider inquiries.",
        "properties": {
          "aws": {
            "description": "Amazon Web Services settings.",
            "$ref": "#/components/schemas/AWS"
          },
          "gcp": {
            "description": "Google cloud platform settings.",
            "$ref": "#/components/schemas/GCP"
          },
          "availability_zones": {
            "description": "Availability zone",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "key_location": {
            "description": "Key location",
            "type": "string"
          },
          "key_ring_name": {
            "description": "Key ring name",
            "type": "string"
          },
          "region": {
            "description": "Region",
            "$ref": "#/components/schemas/CloudRegion"
          },
          "subnets": {
            "description": "Subnets",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "description": "Openshift version",
            "$ref": "#/components/schemas/Version"
          },
          "vpc_ids": {
            "description": "VPC ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CloudRegion": {
        "description": "Description of a region of a cloud provider.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'CloudRegion' if this is a complete object or 'CloudRegionLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "ccs_only": {
            "description": "'true' if the region is supported only for CCS clusters, 'false' otherwise.",
            "type": "boolean"
          },
          "kms_location_id": {
            "description": "(GCP only) Comma-separated list of KMS location IDs that can be used with this region.\nE.g. \"global,nam4,us\". Order is not guaranteed.",
            "type": "string"
          },
          "kms_location_name": {
            "description": "(GCP only) Comma-separated list of display names corresponding to KMSLocationID.\nE.g. \"Global,nam4 (Iowa, South Carolina, and Oklahoma),US\". Order is not guaranteed but will match KMSLocationID.\nUnfortunately, this API doesn't allow robust splitting - Contact ocm-feedback@redhat.com if you want to rely on this.",
            "type": "string"
          },
          "cloud_provider": {
            "description": "Link to the cloud provider that the region belongs to.",
            "$ref": "#/components/schemas/CloudProvider"
          },
          "display_name": {
            "description": "Name of the region for display purposes, for example `N. Virginia`.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the region is enabled for deploying a managed cluster.",
            "type": "boolean"
          },
          "govcloud": {
            "description": "Whether the region is an AWS GovCloud region.",
            "type": "boolean"
          },
          "name": {
            "description": "Human friendly identifier of the region, for example `us-east-1`.\n\nNOTE: Currently for all cloud providers and all regions `id` and `name` have exactly\nthe same values.",
            "type": "string"
          },
          "supports_hypershift": {
            "description": "'true' if the region is supported for Hypershift deployments, 'false' otherwise.",
            "type": "boolean"
          },
          "supports_multi_az": {
            "description": "Whether the region supports multiple availability zones.",
            "type": "boolean"
          }
        }
      },
      "Cluster": {
        "description": "Definition of an _OpenShift_ cluster.\n\nThe `cloud_provider` attribute is a reference to the cloud provider. When a\ncluster is retrieved it will be a link to the cloud provider, containing only\nthe kind, id and href attributes:\n\n```json\n{\n  \"cloud_provider\": {\n    \"kind\": \"CloudProviderLink\",\n    \"id\": \"123\",\n    \"href\": \"/api/clusters_mgmt/v1/cloud_providers/123\"\n  }\n}\n```\n\nWhen a cluster is created this is optional, and if used it should contain the\nidentifier of the cloud provider to use:\n\n```json\n{\n  \"cloud_provider\": {\n    \"id\": \"123\",\n  }\n}\n```\n\nIf not included, then the cluster will be created using the default cloud\nprovider, which is currently Amazon Web Services.\n\nThe region attribute is mandatory when a cluster is created.\n\nThe `aws.access_key_id`, `aws.secret_access_key` and `dns.base_domain`\nattributes are mandatory when creation a cluster with your own Amazon Web\nServices account.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Cluster' if this is a complete object or 'ClusterLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "api": {
            "description": "Information about the API of the cluster.",
            "$ref": "#/components/schemas/ClusterAPI"
          },
          "aws": {
            "description": "Amazon Web Services settings of the cluster.",
            "$ref": "#/components/schemas/AWS"
          },
          "aws_infrastructure_access_role_grants": {
            "description": "List of AWS infrastructure access role grants on this cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AWSInfrastructureAccessRoleGrant"
            }
          },
          "ccs": {
            "description": "Contains configuration of a Customer Cloud Subscription cluster.",
            "$ref": "#/components/schemas/CCS"
          },
          "dns": {
            "description": "DNS settings of the cluster.",
            "$ref": "#/components/schemas/DNS"
          },
          "fips": {
            "description": "Create cluster that uses FIPS Validated / Modules in Process cryptographic libraries.",
            "type": "boolean"
          },
          "gcp": {
            "description": "Google cloud platform settings of the cluster.",
            "$ref": "#/components/schemas/GCP"
          },
          "gcp_encryption_key": {
            "description": "Key used for encryption of GCP cluster nodes.",
            "$ref": "#/components/schemas/GCPEncryptionKey"
          },
          "gcp_network": {
            "description": "GCP Network.",
            "$ref": "#/components/schemas/GCPNetwork"
          },
          "additional_trust_bundle": {
            "description": "Additional trust bundle.",
            "type": "string"
          },
          "addons": {
            "description": "List of add-ons on this cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnInstallation"
            }
          },
          "autoscaler": {
            "description": "Link to an optional _ClusterAutoscaler_ that is coupled with the cluster.",
            "$ref": "#/components/schemas/ClusterAutoscaler"
          },
          "azure": {
            "description": "Microsoft Azure settings of the cluster.",
            "$ref": "#/components/schemas/Azure"
          },
          "billing_model": {
            "description": "Billing model for cluster resources.",
            "$ref": "#/components/schemas/BillingModel"
          },
          "byo_oidc": {
            "description": "Contains information about BYO OIDC.",
            "$ref": "#/components/schemas/ByoOidc"
          },
          "cloud_provider": {
            "description": "Link to the cloud provider where the cluster is installed.",
            "$ref": "#/components/schemas/CloudProvider"
          },
          "console": {
            "description": "Information about the console of the cluster.",
            "$ref": "#/components/schemas/ClusterConsole"
          },
          "creation_timestamp": {
            "description": "Date and time when the cluster was initially created, using the\nformat defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).",
            "type": "string",
            "format": "date-time"
          },
          "delete_protection": {
            "description": "Delete protection",
            "$ref": "#/components/schemas/DeleteProtection"
          },
          "disable_user_workload_monitoring": {
            "description": "Indicates whether the User workload monitoring is enabled or not\nIt is enabled by default",
            "type": "boolean"
          },
          "domain_prefix": {
            "description": "DomainPrefix of the cluster. This prefix is optionally assigned by the user when the\ncluster is created. It will appear in the Cluster's domain when the cluster is provisioned.",
            "type": "string"
          },
          "etcd_encryption": {
            "description": "Indicates whether that etcd is encrypted or not.\nThis is set only during cluster creation.",
            "type": "boolean"
          },
          "expiration_timestamp": {
            "description": "Date and time when the cluster will be automatically deleted, using the format defined in\n[RFC3339](https://www.ietf.org/rfc/rfc3339.txt). If no timestamp is provided, the cluster\nwill never expire.\n\nThis option is unsupported.",
            "type": "string",
            "format": "date-time"
          },
          "external_id": {
            "description": "External identifier of the cluster, generated by the installer.",
            "type": "string"
          },
          "external_auth_config": {
            "description": "External authentication configuration",
            "$ref": "#/components/schemas/ExternalAuthConfig"
          },
          "external_configuration": {
            "description": "ExternalConfiguration shows external configuration on the cluster.",
            "$ref": "#/components/schemas/ExternalConfiguration"
          },
          "flavour": {
            "description": "Link to the _flavour_ that was used to create the cluster.",
            "$ref": "#/components/schemas/Flavour"
          },
          "groups": {
            "description": "Link to the collection of groups of user of the cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "health_state": {
            "description": "HealthState indicates the overall health state of the cluster.",
            "$ref": "#/components/schemas/ClusterHealthState"
          },
          "htpasswd": {
            "description": "Details for `htpasswd` identity provider.",
            "$ref": "#/components/schemas/HTPasswdIdentityProvider"
          },
          "hypershift": {
            "description": "Hypershift configuration.",
            "$ref": "#/components/schemas/Hypershift"
          },
          "identity_providers": {
            "description": "Link to the collection of identity providers of the cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProvider"
            }
          },
          "inflight_checks": {
            "description": "List of inflight checks on this cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InflightCheck"
            }
          },
          "infra_id": {
            "description": "InfraID is used for example to name the VPCs.",
            "type": "string"
          },
          "ingresses": {
            "description": "List of ingresses on this cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ingress"
            }
          },
          "kubelet_config": {
            "description": "Details of cluster-wide KubeletConfig",
            "$ref": "#/components/schemas/KubeletConfig"
          },
          "load_balancer_quota": {
            "description": "Load Balancer quota to be assigned to the cluster.",
            "type": "integer",
            "format": "int32"
          },
          "machine_pools": {
            "description": "List of machine pools on this cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachinePool"
            }
          },
          "managed": {
            "description": "Flag indicating if the cluster is managed (by Red Hat) or\nself-managed by the user.",
            "type": "boolean"
          },
          "managed_service": {
            "description": "Contains information about Managed Service",
            "$ref": "#/components/schemas/ManagedService"
          },
          "multi_az": {
            "description": "Flag indicating if the cluster should be created with nodes in\ndifferent availability zones or all the nodes in a single one\nrandomly selected.",
            "type": "boolean"
          },
          "multi_arch_enabled": {
            "description": "Indicate whether the cluster is enabled for multi arch workers",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the cluster. This name is assigned by the user when the\ncluster is created. This is used to uniquely identify the cluster",
            "type": "string"
          },
          "network": {
            "description": "Network settings of the cluster.",
            "$ref": "#/components/schemas/Network"
          },
          "node_drain_grace_period": {
            "description": "Node drain grace period.",
            "$ref": "#/components/schemas/Value"
          },
          "node_pools": {
            "description": "List of node pools on this cluster.\nNodePool is a scalable set of worker nodes attached to a hosted cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePool"
            }
          },
          "nodes": {
            "description": "Information about the nodes of the cluster.",
            "$ref": "#/components/schemas/ClusterNodes"
          },
          "openshift_version": {
            "description": "Version of _OpenShift_ installed in the cluster, for example `4.0.0-0.2`.\n\nWhen retrieving a cluster this will always be reported.\n\nWhen provisioning a cluster this will be ignored, as the version to\ndeploy will be determined internally.",
            "type": "string"
          },
          "product": {
            "description": "Link to the product type of this cluster.",
            "$ref": "#/components/schemas/Product"
          },
          "properties": {
            "description": "User defined properties for tagging and querying.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "provision_shard": {
            "description": "ProvisionShard contains the properties of the provision shard, including AWS and GCP related configurations",
            "$ref": "#/components/schemas/ProvisionShard"
          },
          "proxy": {
            "description": "Proxy.",
            "$ref": "#/components/schemas/Proxy"
          },
          "region": {
            "description": "Link to the cloud provider region where the cluster is installed.",
            "$ref": "#/components/schemas/CloudRegion"
          },
          "state": {
            "description": "Overall state of the cluster.",
            "$ref": "#/components/schemas/ClusterState"
          },
          "status": {
            "description": "Status of cluster",
            "$ref": "#/components/schemas/ClusterStatus"
          },
          "storage_quota": {
            "description": "Storage quota to be assigned to the cluster.",
            "$ref": "#/components/schemas/Value"
          },
          "subscription": {
            "description": "Link to the subscription that comes from the account management service when the cluster\nis registered.",
            "$ref": "#/components/schemas/Subscription"
          },
          "version": {
            "description": "Link to the version of _OpenShift_ that will be used to install the cluster.",
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "ClusterAPI": {
        "description": "Information about the API of a cluster.",
        "properties": {
          "url": {
            "description": "The URL of the API server of the cluster.",
            "type": "string"
          },
          "listening": {
            "description": "The listening method of the API server.",
            "$ref": "#/components/schemas/ListeningMethod"
          }
        }
      },
      "ClusterAutoscaler": {
        "description": "Cluster-wide autoscaling configuration.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ClusterAutoscaler' if this is a complete object or 'ClusterAutoscalerLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "balance_similar_node_groups": {
            "description": "BalanceSimilarNodeGroups enables/disables the\n`--balance-similar-node-groups` cluster-autoscaler feature.\nThis feature will automatically identify node groups with\nthe same instance type and the same set of labels and try\nto keep the respective sizes of those node groups balanced.",
            "type": "boolean"
          },
          "balancing_ignored_labels": {
            "description": "This option specifies labels that cluster autoscaler should ignore when considering node group similarity.\nFor example, if you have nodes with \"topology.ebs.csi.aws.com/zone\" label, you can add name of this label here\nto prevent cluster autoscaler from splitting nodes into different node groups based on its value.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignore_daemonsets_utilization": {
            "description": "Should CA ignore DaemonSet pods when calculating resource utilization for scaling down. false by default.",
            "type": "boolean"
          },
          "log_verbosity": {
            "description": "Sets the autoscaler log level.\nDefault value is 1, level 4 is recommended for DEBUGGING and level 6 will enable almost everything.",
            "type": "integer",
            "format": "int32"
          },
          "max_node_provision_time": {
            "description": "Maximum time CA waits for node to be provisioned.",
            "type": "string"
          },
          "max_pod_grace_period": {
            "description": "Gives pods graceful termination time before scaling down.",
            "type": "integer",
            "format": "int32"
          },
          "pod_priority_threshold": {
            "description": "To allow users to schedule \"best-effort\" pods, which shouldn't trigger\nCluster Autoscaler actions, but only run when there are spare resources available,\nMore info: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-cluster-autoscaler-work-with-pod-priority-and-preemption.",
            "type": "integer",
            "format": "int32"
          },
          "resource_limits": {
            "description": "Constraints of autoscaling resources.",
            "$ref": "#/components/schemas/AutoscalerResourceLimits"
          },
          "scale_down": {
            "description": "Configuration of scale down operation.",
            "$ref": "#/components/schemas/AutoscalerScaleDownConfig"
          },
          "skip_nodes_with_local_storage": {
            "description": "Enables/Disables `--skip-nodes-with-local-storage` CA feature flag. If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by default at autoscaler.",
            "type": "boolean"
          }
        }
      },
      "ClusterConfigurationMode": {
        "description": "Configuration mode of a cluster.",
        "type": "string",
        "enum": [
          "full",
          "read_only"
        ]
      },
      "ClusterConsole": {
        "description": "Information about the console of a cluster.",
        "properties": {
          "url": {
            "description": "The URL of the console of the cluster.",
            "type": "string"
          }
        }
      },
      "ClusterCredentials": {
        "description": "Credentials of the a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ClusterCredentials' if this is a complete object or 'ClusterCredentialsLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "kubeconfig": {
            "description": "Administrator _kubeconfig_ file for the cluster.",
            "type": "string"
          }
        }
      },
      "ClusterDeployment": {
        "description": "Representation of a clusterdeployment.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ClusterDeployment' if this is a complete object or 'ClusterDeploymentLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "content": {
            "description": "Content of the clusterdeployment.",
            "type": "object"
          }
        }
      },
      "ClusterHealthState": {
        "description": "ClusterHealthState indicates the health of a cluster.",
        "type": "string",
        "enum": [
          "healthy",
          "unhealthy",
          "unknown"
        ]
      },
      "ClusterLink": {
        "description": "Definition of a cluster link.",
        "properties": {
          "href": {
            "description": "HREF for the cluster, filled in response.",
            "type": "string"
          },
          "id": {
            "description": "The cluster's ID.",
            "type": "string"
          }
        }
      },
      "ClusterNodes": {
        "description": "Counts of different classes of nodes inside a cluster.",
        "properties": {
          "autoscale_compute": {
            "description": "Details for auto-scaling the compute machine pool.\nCompute and AutoscaleCompute cannot be used together.",
            "$ref": "#/components/schemas/MachinePoolAutoscaling"
          },
          "availability_zones": {
            "description": "The availability zones upon which the nodes are created.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compute": {
            "description": "Number of compute nodes of the cluster.\nCompute and AutoscaleCompute cannot be used together.",
            "type": "integer",
            "format": "int32"
          },
          "compute_labels": {
            "description": "The labels set on the \"default\" compute machine pool.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "compute_machine_type": {
            "description": "The compute machine type to use, for example `r5.xlarge`.",
            "$ref": "#/components/schemas/MachineType"
          },
          "compute_root_volume": {
            "description": "The compute machine root volume capabilities.",
            "$ref": "#/components/schemas/RootVolume"
          },
          "infra": {
            "description": "Number of infrastructure nodes of the cluster.",
            "type": "integer",
            "format": "int32"
          },
          "infra_machine_type": {
            "description": "The infra machine type to use, for example `r5.xlarge` (Optional).",
            "$ref": "#/components/schemas/MachineType"
          },
          "master": {
            "description": "Number of master nodes of the cluster.",
            "type": "integer",
            "format": "int32"
          },
          "master_machine_type": {
            "description": "The master machine type to use, for example `r5.xlarge` (Optional).",
            "$ref": "#/components/schemas/MachineType"
          },
          "security_group_filters": {
            "description": "List of security groups to be applied to nodes (Optional).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachinePoolSecurityGroupFilter"
            }
          },
          "total": {
            "description": "Total number of nodes of the cluster.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClusterOperatorInfo": {
        "properties": {
          "condition": {
            "description": "Operator status.  Empty string if unknown.",
            "$ref": "#/components/schemas/ClusterOperatorState"
          },
          "name": {
            "description": "Name of the operator.",
            "type": "string"
          },
          "reason": {
            "description": "Extra detail on condition, if available.  Empty string if unknown.",
            "type": "string"
          },
          "time": {
            "description": "Time when the sample was obtained, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.",
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "description": "Current version of the operator.  Empty string if unknown.",
            "type": "string"
          }
        }
      },
      "ClusterOperatorState": {
        "description": "Overall state of a cluster operator.",
        "type": "string",
        "enum": [
          "available",
          "degraded",
          "failing",
          "upgrading"
        ]
      },
      "ClusterOperatorsInfo": {
        "description": "Provides detailed information about the operators installed on the cluster.",
        "properties": {
          "operators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterOperatorInfo"
            }
          }
        }
      },
      "ClusterRegistration": {
        "description": "Registration of a new cluster to the service.\n\nFor example, to register a cluster that has been provisioned outside\nof this service, send a a request like this:\n\n```http\nPOST /api/clusters_mgmt/v1/register_cluster HTTP/1.1\n```\n\nWith a request body like this:\n\n```json\n{\n  \"external_id\": \"d656aecf-11a6-4782-ad86-8f72638449ba\",\n  \"subscription_id\": \"...\",\n  \"organization_id\": \"...\"\n}\n```",
        "properties": {
          "console_url": {
            "description": "Optional Console URL of the cluster.",
            "type": "string"
          },
          "external_id": {
            "description": "Identifier of the cluster generated by the installer.",
            "type": "string"
          },
          "organization_id": {
            "description": "Organization identifier of the cluster generated by the\naccount manager.",
            "type": "string"
          },
          "subscription_id": {
            "description": "Subscription identifier of the cluster generated by the account\nmanager.",
            "type": "string"
          }
        }
      },
      "ClusterResources": {
        "description": "Cluster Resource which belongs to a cluster, example Cluster Deployment.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ClusterResources' if this is a complete object or 'ClusterResourcesLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "cluster_id": {
            "description": "Cluster ID for the fetched resources",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "Date and time when the resources were fetched.",
            "type": "string",
            "format": "date-time"
          },
          "resources": {
            "description": "Returned map of cluster resources fetched.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ClusterState": {
        "description": "Overall state of a cluster.",
        "type": "string",
        "enum": [
          "error",
          "hibernating",
          "installing",
          "pending",
          "powering_down",
          "ready",
          "resuming",
          "uninstalling",
          "unknown",
          "validating",
          "waiting"
        ]
      },
      "ClusterStatus": {
        "description": "Detailed status of a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ClusterStatus' if this is a complete object or 'ClusterStatusLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "dns_ready": {
            "description": "DNSReady from Provisioner",
            "type": "boolean"
          },
          "oidc_ready": {
            "description": "OIDCReady from user configuration.",
            "type": "boolean"
          },
          "configuration_mode": {
            "description": "Configuration mode",
            "$ref": "#/components/schemas/ClusterConfigurationMode"
          },
          "current_compute": {
            "description": "Current Replicas available for a Hosted Cluster",
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "description": "Detailed description of the cluster status.",
            "type": "string"
          },
          "limited_support_reason_count": {
            "description": "Limited Support Reason Count",
            "type": "integer",
            "format": "int32"
          },
          "provision_error_code": {
            "description": "Provisioning Error Code",
            "type": "string"
          },
          "provision_error_message": {
            "description": "Provisioning Error Message",
            "type": "string"
          },
          "state": {
            "description": "The overall state of the cluster.",
            "$ref": "#/components/schemas/ClusterState"
          }
        }
      },
      "ComponentRoute": {
        "description": "Representation of a Component Route.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ComponentRoute' if this is a complete object or 'ComponentRouteLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "hostname": {
            "description": "Hostname of the route.",
            "type": "string"
          },
          "tls_secret_ref": {
            "description": "TLS Secret reference of the route.",
            "type": "string"
          }
        }
      },
      "ComponentRouteType": {
        "description": "Type of Component Route.",
        "type": "string",
        "enum": [
          "console",
          "downloads",
          "oauth"
        ]
      },
      "ControlPlaneUpgradePolicy": {
        "description": "Representation of an upgrade policy that can be set for a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ControlPlaneUpgradePolicy' if this is a complete object or 'ControlPlaneUpgradePolicyLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "cluster_id": {
            "description": "Cluster ID this upgrade policy for control plane is defined for.",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "Timestamp for creation of resource.",
            "type": "string",
            "format": "date-time"
          },
          "enable_minor_version_upgrades": {
            "description": "Indicates if minor version upgrades are allowed for automatic upgrades (for manual it's always allowed).",
            "type": "boolean"
          },
          "last_update_timestamp": {
            "description": "Timestamp for last update that happened to resource.",
            "type": "string",
            "format": "date-time"
          },
          "next_run": {
            "description": "Next time the upgrade should run.",
            "type": "string",
            "format": "date-time"
          },
          "schedule": {
            "description": "Schedule cron expression that defines automatic upgrade scheduling.",
            "type": "string"
          },
          "schedule_type": {
            "description": "Schedule type of the control plane upgrade.",
            "$ref": "#/components/schemas/ScheduleType"
          },
          "state": {
            "description": "State of the upgrade policy for the hosted control plane.",
            "$ref": "#/components/schemas/UpgradePolicyState"
          },
          "upgrade_type": {
            "description": "Upgrade type of the control plane.",
            "$ref": "#/components/schemas/UpgradeType"
          },
          "version": {
            "description": "Version is the desired upgrade version.",
            "type": "string"
          }
        }
      },
      "CredentialRequest": {
        "description": "Contains the necessary attributes to allow each operator to access the necessary AWS resources",
        "properties": {
          "name": {
            "description": "Name of the credentials secret used to access cloud resources",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace where the credentials secret lives in the cluster",
            "type": "string"
          },
          "policy_permissions": {
            "description": "List of policy permissions needed to access cloud resources",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "service_account": {
            "description": "Service account name to use when authenticating",
            "type": "string"
          }
        }
      },
      "DeleteProtection": {
        "description": "DeleteProtection configuration.",
        "properties": {
          "enabled": {
            "description": "Boolean flag indicating if the cluster should be be using _DeleteProtection_.\n\nBy default this is `false`.\n\nTo enable it a SREP needs to patch the value through OCM API",
            "type": "boolean"
          }
        }
      },
      "DetectionType": {
        "type": "string",
        "enum": [
          "auto",
          "manual"
        ]
      },
      "Ec2MetadataHttpTokens": {
        "description": "Which Ec2MetadataHttpTokens to use for metadata service interaction options for EC2 instances",
        "type": "string",
        "enum": [
          "optional",
          "required"
        ]
      },
      "EncryptionKey": {
        "description": "Description of a cloud provider encryption key.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'EncryptionKey' if this is a complete object or 'EncryptionKeyLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "name": {
            "description": "Name of the encryption key.",
            "type": "string"
          }
        }
      },
      "Environment": {
        "description": "Description of an environment",
        "properties": {
          "backplane_url": {
            "description": "the backplane url for the environment",
            "type": "string"
          },
          "last_limited_support_check": {
            "description": "last time that the worker checked for limited support clusters",
            "type": "string",
            "format": "date-time"
          },
          "last_upgrade_available_check": {
            "description": "last time that the worker checked for available upgrades",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "environment name",
            "type": "string"
          }
        }
      },
      "Event": {
        "description": "Representation of a trackable event.",
        "properties": {
          "body": {
            "description": "Body of the event to track the details of the tracking event as Key value pair",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "key": {
            "description": "Key of the event to be tracked. This key should start with an\nuppercase letter followed by alphanumeric characters or\nunderscores. The entire key needs to be smaller than 64 characters.",
            "type": "string"
          }
        }
      },
      "ExternalAuth": {
        "description": "Representation of an external authentication provider.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ExternalAuth' if this is a complete object or 'ExternalAuthLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "claim": {
            "description": "The rules on how to transform information from an ID token into a cluster identity.",
            "$ref": "#/components/schemas/ExternalAuthClaim"
          },
          "clients": {
            "description": "The list of the platform's clients that need to request tokens from the issuer.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalAuthClientConfig"
            }
          },
          "issuer": {
            "description": "The issuer describes the attributes of the OIDC token issuer.",
            "$ref": "#/components/schemas/TokenIssuer"
          }
        }
      },
      "ExternalAuthClaim": {
        "description": "The claims and validation rules used in the configuration of the external authentication.",
        "properties": {
          "mappings": {
            "description": "Mapping describes rules on how to transform information from an ID token into a cluster identity.",
            "$ref": "#/components/schemas/TokenClaimMappings"
          },
          "validation_rules": {
            "description": "ValidationRules are rules that are applied to validate token claims to authenticate users.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenClaimValidationRule"
            }
          }
        }
      },
      "ExternalAuthClientConfig": {
        "description": "ExternalAuthClientConfig contains configuration for the platform's clients that\nneed to request tokens from the issuer.",
        "properties": {
          "id": {
            "description": "The identifier of the OIDC client from the OIDC provider.",
            "type": "string"
          },
          "component": {
            "description": "The component that is supposed to consume this client configuration.",
            "$ref": "#/components/schemas/ClientComponent"
          },
          "extra_scopes": {
            "description": "ExtraScopes is an optional set of scopes to request tokens with.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secret": {
            "description": "The secret of the OIDC client from the OIDC provider.",
            "type": "string"
          }
        }
      },
      "ExternalAuthConfig": {
        "description": "ExternalAuthConfig configuration",
        "properties": {
          "enabled": {
            "description": "Boolean flag indicating if the cluster should use an external authentication configuration.\n\nBy default this is false.\n\nTo enable it the cluster needs to be ROSA HCP cluster and the organization of the user needs\nto have the `external-authentication` feature toggle enabled.",
            "type": "boolean"
          },
          "external_auths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalAuth"
            }
          }
        }
      },
      "ExternalConfiguration": {
        "description": "Representation of cluster external configuration.",
        "properties": {
          "labels": {
            "description": "list of labels externally configured on the clusterdeployment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "manifests": {
            "description": "list of manifest externally configured for a hosted cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Manifest"
            }
          },
          "syncsets": {
            "description": "list of syncsets externally configured on the cluster.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Syncset"
            }
          }
        }
      },
      "Flavour": {
        "description": "Set of predefined properties of a cluster. For example, a _huge_ flavour can be a cluster\nwith 10 infra nodes and 1000 compute nodes.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Flavour' if this is a complete object or 'FlavourLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "aws": {
            "description": "Default _Amazon Web Services_ settings of the cluster.",
            "$ref": "#/components/schemas/AWSFlavour"
          },
          "gcp": {
            "description": "Default _Google Cloud Platform_ settings of the cluster.",
            "$ref": "#/components/schemas/GCPFlavour"
          },
          "name": {
            "description": "Human friendly identifier of the cluster, for example `4`.\n\nNOTE: Currently for all flavours the `id` and `name` attributes have exactly the\nsame values.",
            "type": "string"
          },
          "network": {
            "description": "Default network settings of the cluster.\n\nThese can be overridden specifying in the cluster itself a different set of settings.",
            "$ref": "#/components/schemas/Network"
          },
          "nodes": {
            "description": "Number of nodes that will be used by default when creating a cluster that uses\nthis flavour.\n\nThese can be overridden specifying in the cluster itself a different number of nodes.",
            "$ref": "#/components/schemas/FlavourNodes"
          }
        }
      },
      "FlavourNodes": {
        "description": "Counts of different classes of nodes inside a flavour.",
        "properties": {
          "master": {
            "description": "Number of master nodes of the cluster.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GcpAuthentication": {
        "description": "Google cloud platform authentication method of a cluster.",
        "properties": {
          "href": {
            "description": "Self link",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object",
            "type": "string"
          },
          "kind": {
            "description": "Indicates the type of this object",
            "type": "string"
          }
        }
      },
      "GcpSecurity": {
        "description": "Google cloud platform security settings of a cluster.",
        "properties": {
          "secure_boot": {
            "description": "Determines if Shielded VM feature \"Secure Boot\" should be set for the nodes of the cluster.",
            "type": "boolean"
          }
        }
      },
      "GithubIdentityProvider": {
        "description": "Details for `github` identity providers.",
        "properties": {
          "ca": {
            "description": "Optional trusted certificate authority bundle to use when making requests tot he server.",
            "type": "string"
          },
          "client_id": {
            "description": "Client identifier of a registered _GitHub_ OAuth application.",
            "type": "string"
          },
          "client_secret": {
            "description": "Client secret of a registered _GitHub_ OAuth application.",
            "type": "string"
          },
          "hostname": {
            "description": "For _GitHub Enterprise_ you must provide the host name of your instance, such as\n`example.com`. This value must match the _GitHub Enterprise_ host name value in the\n`/setup/settings` file and cannot include a port number.\n\nFor plain _GitHub_ omit this parameter.",
            "type": "string"
          },
          "organizations": {
            "description": "Optional list of organizations. Cannot be used in combination with the Teams field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "teams": {
            "description": "Optional list of teams. Cannot be used in combination with the Organizations field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GitlabIdentityProvider": {
        "description": "Details for `gitlab` identity providers.",
        "properties": {
          "ca": {
            "description": "Optional trusted certificate authority bundle to use when making requests tot he server.",
            "type": "string"
          },
          "url": {
            "description": "URL of the _GitLab_ instance.",
            "type": "string"
          },
          "client_id": {
            "description": "Client identifier of a registered _GitLab_ OAuth application.",
            "type": "string"
          },
          "client_secret": {
            "description": "Client secret issued by _GitLab_.",
            "type": "string"
          }
        }
      },
      "GoogleIdentityProvider": {
        "description": "Details for `google` identity providers.",
        "properties": {
          "client_id": {
            "description": "Client identifier of a registered _Google_ project.",
            "type": "string"
          },
          "client_secret": {
            "description": "Client secret issued by _Google_.",
            "type": "string"
          },
          "hosted_domain": {
            "description": "Optional hosted domain to restrict sign-in accounts to.",
            "type": "string"
          }
        }
      },
      "Group": {
        "description": "Representation of a group of users.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Group' if this is a complete object or 'GroupLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "users": {
            "description": "List of users of the group.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "GroupsClaim": {
        "properties": {
          "claim": {
            "description": "The claim used in the token.",
            "type": "string"
          },
          "prefix": {
            "description": "A prefix contatenated in the claim (Optional).",
            "type": "string"
          }
        }
      },
      "Hypershift": {
        "description": "Hypershift configuration.",
        "properties": {
          "enabled": {
            "description": "Boolean flag indicating if the cluster should be creating using _Hypershift_.\n\nBy default this is `false`.\n\nTo enable it the cluster needs to be ROSA cluster and the organization of the user needs\nto have the `hypershift` capability enabled.",
            "type": "boolean"
          }
        }
      },
      "HypershiftConfig": {
        "description": "Hypershift configuration.",
        "properties": {
          "enabled": {
            "description": "Boolean flag indicating if the cluster should be creating using _Hypershift_.\n\nBy default this is `false`.\n\nTo enable it the cluster needs to be ROSA cluster and the organization of the user needs\nto have the `hypershift` capability enabled.",
            "type": "boolean"
          },
          "management_cluster": {
            "description": "Contains the name of the current management cluster for this Hypershift cluster.\nEmpty for non Hypershift clusters.",
            "type": "string"
          }
        }
      },
      "IdentityProvider": {
        "description": "Representation of an identity provider.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'IdentityProvider' if this is a complete object or 'IdentityProviderLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "ldap": {
            "description": "Details for `ldap` identity providers.",
            "$ref": "#/components/schemas/LDAPIdentityProvider"
          },
          "challenge": {
            "description": "When `true` unauthenticated token requests from non-web clients (like the CLI) are sent a\n`WWW-Authenticate` challenge header for this provider.",
            "type": "boolean"
          },
          "github": {
            "description": "Details for `github` identity providers.",
            "$ref": "#/components/schemas/GithubIdentityProvider"
          },
          "gitlab": {
            "description": "Details for `gitlab` identity providers.",
            "$ref": "#/components/schemas/GitlabIdentityProvider"
          },
          "google": {
            "description": "Details for `google` identity providers.",
            "$ref": "#/components/schemas/GoogleIdentityProvider"
          },
          "htpasswd": {
            "description": "Details for `htpasswd` identity providers.",
            "$ref": "#/components/schemas/HTPasswdIdentityProvider"
          },
          "login": {
            "description": "When `true` unauthenticated token requests from web clients (like the web console) are\nredirected to the authorize URL to log in.",
            "type": "boolean"
          },
          "mapping_method": {
            "description": "Controls how mappings are established between this provider's identities and user\nobjects.",
            "$ref": "#/components/schemas/IdentityProviderMappingMethod"
          },
          "name": {
            "description": "The name of the identity provider.",
            "type": "string"
          },
          "open_id": {
            "description": "Details for `openid` identity providers.",
            "$ref": "#/components/schemas/OpenIDIdentityProvider"
          },
          "type": {
            "description": "Type of identity provider. The rest of the attributes will be populated according to this\nvalue. For example, if the type is `github` then only the `github` attribute will be\npopulated.",
            "$ref": "#/components/schemas/IdentityProviderType"
          }
        }
      },
      "IdentityProviderMappingMethod": {
        "description": "Controls how mappings are established between provider identities and user objects.",
        "type": "string",
        "enum": [
          "add",
          "claim",
          "generate",
          "lookup"
        ]
      },
      "IdentityProviderType": {
        "description": "Type of identity provider.",
        "type": "string",
        "enum": [
          "LDAPIdentityProvider",
          "GithubIdentityProvider",
          "GitlabIdentityProvider",
          "GoogleIdentityProvider",
          "HTPasswdIdentityProvider",
          "OpenIDIdentityProvider"
        ]
      },
      "ImageOverrides": {
        "description": "ImageOverrides holds the lists of available images per cloud provider.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ImageOverrides' if this is a complete object or 'ImageOverridesLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "aws": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AMIOverride"
            }
          },
          "gcp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GCPImageOverride"
            }
          }
        }
      },
      "InflightCheck": {
        "description": "Representation of check running before the cluster is provisioned.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'InflightCheck' if this is a complete object or 'InflightCheckLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "details": {
            "description": "Details regarding the state of the inflight check.",
            "type": "object"
          },
          "ended_at": {
            "description": "The time the check finished running.",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "The name of the inflight check.",
            "type": "string"
          },
          "restarts": {
            "description": "The number of times the inflight check restarted.",
            "type": "integer",
            "format": "int32"
          },
          "started_at": {
            "description": "The time the check started running.",
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "description": "State of the inflight check.",
            "$ref": "#/components/schemas/InflightCheckState"
          }
        }
      },
      "InflightCheckState": {
        "description": "State of an inflight check.",
        "type": "string",
        "enum": [
          "failed",
          "passed",
          "pending",
          "running"
        ]
      },
      "Ingress": {
        "description": "Representation of an ingress.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Ingress' if this is a complete object or 'IngressLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "dns_name": {
            "description": "DNS Name of the ingress.",
            "type": "string"
          },
          "cluster_routes_hostname": {
            "description": "Cluster routes hostname.",
            "type": "string"
          },
          "cluster_routes_tls_secret_ref": {
            "description": "Cluster routes TLS Secret reference.",
            "type": "string"
          },
          "component_routes": {
            "description": "Component Routes settings.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComponentRoute"
            }
          },
          "default": {
            "description": "Indicates if this is the default ingress.",
            "type": "boolean"
          },
          "excluded_namespaces": {
            "description": "A set of excluded namespaces for the ingress.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "listening": {
            "description": "Listening method of the ingress",
            "$ref": "#/components/schemas/ListeningMethod"
          },
          "load_balancer_type": {
            "description": "Load Balancer type of the ingress",
            "$ref": "#/components/schemas/LoadBalancerFlavor"
          },
          "route_namespace_ownership_policy": {
            "description": "Namespace Ownership Policy for the ingress.",
            "$ref": "#/components/schemas/NamespaceOwnershipPolicy"
          },
          "route_selectors": {
            "description": "A set of labels for the ingress. ",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "route_wildcard_policy": {
            "description": "Wildcard policy for the ingress.",
            "$ref": "#/components/schemas/WildcardPolicy"
          }
        }
      },
      "InstanceIAMRoles": {
        "description": "Contains the necessary attributes to support role-based authentication on AWS.",
        "properties": {
          "master_role_arn": {
            "description": "The IAM role ARN that will be attached to master instances",
            "type": "string"
          },
          "worker_role_arn": {
            "description": "The IAM role ARN that will be attached to worker instances",
            "type": "string"
          }
        }
      },
      "KeyRing": {
        "description": "Description of a cloud provider key ring.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'KeyRing' if this is a complete object or 'KeyRingLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "name": {
            "description": "Name of the key ring.",
            "type": "string"
          }
        }
      },
      "KubeletConfig": {
        "description": "OCM representation of KubeletConfig, exposing the fields of Kubernetes\nKubeletConfig that can be managed by users",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'KubeletConfig' if this is a complete object or 'KubeletConfigLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "name": {
            "description": "Allows the user to specify the name to be used to identify this KubeletConfig.\nOptional. A name will be generated if not provided.",
            "type": "string"
          },
          "pod_pids_limit": {
            "description": "Allows the user to specify the podPidsLimit to be applied via KubeletConfig.\nUseful if workloads have greater PIDs limit requirements than the OCP default.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Label": {
        "description": "Representation of a label in clusterdeployment.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Label' if this is a complete object or 'LabelLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "key": {
            "description": "the key of the label",
            "type": "string"
          },
          "value": {
            "description": "the value to set in the label",
            "type": "string"
          }
        }
      },
      "LimitedSupportReason": {
        "description": "A reason that a cluster is in limited support.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'LimitedSupportReason' if this is a complete object or 'LimitedSupportReasonLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "The time the reason was detected.",
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "description": "URL with a link to a detailed description of the reason.",
            "type": "string"
          },
          "detection_type": {
            "description": "Indicates if the reason was detected automatically or manually.\nWhen creating a new reason this field should be empty or \"manual\".",
            "$ref": "#/components/schemas/DetectionType"
          },
          "summary": {
            "description": "Summary of the reason.",
            "type": "string"
          },
          "template": {
            "description": "Optional link to a template with summary and details.",
            "$ref": "#/components/schemas/LimitedSupportReasonTemplate"
          }
        }
      },
      "LimitedSupportReasonTemplate": {
        "description": "A template for cluster limited support reason.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'LimitedSupportReasonTemplate' if this is a complete object or 'LimitedSupportReasonTemplateLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "details": {
            "description": "A detailed description of the reason.",
            "type": "string"
          },
          "summary": {
            "description": "Summary of the reason.",
            "type": "string"
          }
        }
      },
      "ListeningMethod": {
        "description": "Cluster components listening method.",
        "type": "string",
        "enum": [
          "external",
          "internal"
        ]
      },
      "LoadBalancerFlavor": {
        "description": "Type of load balancer for AWS cloud provider parameters.",
        "type": "string",
        "enum": [
          "classic",
          "nlb"
        ]
      },
      "Log": {
        "description": "Log of the cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Log' if this is a complete object or 'LogLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "content": {
            "description": "Content of the log.",
            "type": "string"
          }
        }
      },
      "MachinePool": {
        "description": "Representation of a machine pool in a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'MachinePool' if this is a complete object or 'MachinePoolLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "aws": {
            "description": "AWS specific parameters (Optional).",
            "$ref": "#/components/schemas/AWSMachinePool"
          },
          "autoscaling": {
            "description": "Details for auto-scaling the machine pool.\nReplicas and autoscaling cannot be used together.",
            "$ref": "#/components/schemas/MachinePoolAutoscaling"
          },
          "availability_zones": {
            "description": "The availability zones upon which the nodes are created.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "instance_type": {
            "description": "The instance type of Nodes to create.",
            "type": "string"
          },
          "labels": {
            "description": "The labels set on the Nodes created.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "replicas": {
            "description": "The number of Machines (and Nodes) to create.\nReplicas and autoscaling cannot be used together.",
            "type": "integer",
            "format": "int32"
          },
          "root_volume": {
            "description": "The machine root volume capabilities.",
            "$ref": "#/components/schemas/RootVolume"
          },
          "security_group_filters": {
            "description": "List of security groups to be applied to MachinePool (Optional)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachinePoolSecurityGroupFilter"
            }
          },
          "subnets": {
            "description": "The subnets upon which the nodes are created.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "taints": {
            "description": "The taints set on the Nodes created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            }
          }
        }
      },
      "MachinePoolAutoscaling": {
        "description": "Representation of a autoscaling in a machine pool.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'MachinePoolAutoscaling' if this is a complete object or 'MachinePoolAutoscalingLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "max_replicas": {
            "description": "The maximum number of replicas for the machine pool.",
            "type": "integer",
            "format": "int32"
          },
          "min_replicas": {
            "description": "The minimum number of replicas for the machine pool.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MachinePoolSecurityGroupFilter": {
        "description": "Security Group Filter object, containing name of the filter tag and value of the filter tag",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MachineType": {
        "description": "Machine type.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'MachineType' if this is a complete object or 'MachineTypeLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "ccs_only": {
            "description": "'true' if the instance type is supported only for CCS clusters, 'false' otherwise.",
            "type": "boolean"
          },
          "cpu": {
            "description": "The amount of cpu's of the machine type.",
            "$ref": "#/components/schemas/Value"
          },
          "architecture": {
            "description": "The architecture of the machine type.",
            "$ref": "#/components/schemas/ProcessorType"
          },
          "category": {
            "description": "The category which the machine type is suitable for.",
            "$ref": "#/components/schemas/MachineTypeCategory"
          },
          "cloud_provider": {
            "description": "Link to the cloud provider that the machine type belongs to.",
            "$ref": "#/components/schemas/CloudProvider"
          },
          "generic_name": {
            "description": "Generic name for quota purposes, for example `highmem-4`.\nCloud provider agnostic - many values are shared between \"similar\"\nmachine types on different providers.\nCorresponds to `resource_name` values in \"compute.node\"  quota cost data.",
            "type": "string"
          },
          "memory": {
            "description": "The amount of memory of the machine type.",
            "$ref": "#/components/schemas/Value"
          },
          "name": {
            "description": "Human friendly identifier of the machine type, for example `r5.xlarge - Memory Optimized`.",
            "type": "string"
          },
          "size": {
            "description": "The size of the machine type.",
            "$ref": "#/components/schemas/MachineTypeSize"
          }
        }
      },
      "MachineTypeCategory": {
        "description": "Machine type category.",
        "type": "string",
        "enum": [
          "accelerated_computing",
          "compute_optimized",
          "general_purpose",
          "memory_optimized"
        ]
      },
      "MachineTypeSize": {
        "description": "Machine type size.",
        "type": "string",
        "enum": [
          "large",
          "medium",
          "small"
        ]
      },
      "ManagedService": {
        "description": "Contains the necessary attributes to support role-based authentication on AWS.",
        "properties": {
          "enabled": {
            "description": "Indicates whether the cluster belongs to a managed service\nThis should only be set by the \"Managed Service\" service.\nclusters with this set can only be modified by the \"Managed Service\" service.",
            "type": "boolean"
          }
        }
      },
      "Manifest": {
        "description": "Representation of a manifestwork.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Manifest' if this is a complete object or 'ManifestLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "workloads": {
            "description": "List of k8s objects to deploy on a hosted cluster.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "NamespaceOwnershipPolicy": {
        "description": "Type of Namespace Ownership Policy.",
        "type": "string",
        "enum": [
          "InterNamespaceAllowed",
          "Strict"
        ]
      },
      "Network": {
        "description": "Network configuration of a cluster.",
        "properties": {
          "host_prefix": {
            "description": "Network host prefix which is defaulted to `23` if not specified.",
            "type": "integer",
            "format": "int32"
          },
          "machine_cidr": {
            "description": "IP address block from which to assign machine IP addresses, for example `10.0.0.0/16`.",
            "type": "string"
          },
          "pod_cidr": {
            "description": "IP address block from which to assign pod IP addresses, for example `10.128.0.0/14`.",
            "type": "string"
          },
          "service_cidr": {
            "description": "IP address block from which to assign service IP addresses, for example `172.30.0.0/16`.",
            "type": "string"
          },
          "type": {
            "description": "The main controller responsible for rendering the core networking components.",
            "type": "string"
          }
        }
      },
      "NetworkVerification": {
        "properties": {
          "cloud_provider_data": {
            "description": "Cloud provider data to execute the network verification.",
            "$ref": "#/components/schemas/CloudProviderData"
          },
          "cluster_id": {
            "description": "Cluster ID needed to execute the network verification.",
            "type": "string"
          },
          "items": {
            "description": "Details about each subnet network verification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubnetNetworkVerification"
            }
          },
          "platform": {
            "description": "Platform needed to execute the network verification.",
            "$ref": "#/components/schemas/Platform"
          },
          "total": {
            "description": "Amount of network verifier executions started.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodeInfo": {
        "description": "Provides information about a node from specific type in the cluster.",
        "properties": {
          "amount": {
            "description": "The amount of the nodes from this type.",
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "description": "The Node type.",
            "$ref": "#/components/schemas/NodeType"
          }
        }
      },
      "NodePool": {
        "description": "Representation of a node pool in a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'NodePool' if this is a complete object or 'NodePoolLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "aws_node_pool": {
            "description": "AWS specific parameters (Optional).",
            "$ref": "#/components/schemas/AWSNodePool"
          },
          "auto_repair": {
            "description": "Specifies whether health checks should be enabled for machines in the NodePool.",
            "type": "boolean"
          },
          "autoscaling": {
            "description": "Details for auto-scaling the machine pool.\nReplicas and autoscaling cannot be used together.",
            "$ref": "#/components/schemas/NodePoolAutoscaling"
          },
          "availability_zone": {
            "description": "The availability zone upon which the node is created.",
            "type": "string"
          },
          "azure_node_pool": {
            "description": "Azure specific parameters.",
            "$ref": "#/components/schemas/AzureNodePool"
          },
          "kubelet_configs": {
            "description": "The names of the KubeletConfigs for this node pool.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "description": "The labels set on the Nodes created.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "management_upgrade": {
            "description": "Management parameters (Optional).",
            "$ref": "#/components/schemas/NodePoolManagementUpgrade"
          },
          "node_drain_grace_period": {
            "description": "Time to wait for a NodePool to drain when it is upgraded or replaced before it is forcibly removed.",
            "$ref": "#/components/schemas/Value"
          },
          "replicas": {
            "description": "The number of Machines (and Nodes) to create.\nReplicas and autoscaling cannot be used together.",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "NodePool status.",
            "$ref": "#/components/schemas/NodePoolStatus"
          },
          "subnet": {
            "description": "The subnet upon which the nodes are created.",
            "type": "string"
          },
          "taints": {
            "description": "The taints set on the Nodes created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            }
          },
          "tuning_configs": {
            "description": "The names of the tuning configs for this node pool.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "description": "Version of the node pool.",
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "NodePoolAutoscaling": {
        "description": "Representation of a autoscaling in a node pool.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'NodePoolAutoscaling' if this is a complete object or 'NodePoolAutoscalingLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "max_replica": {
            "description": "The maximum number of replicas for the node pool.",
            "type": "integer",
            "format": "int32"
          },
          "min_replica": {
            "description": "The minimum number of replicas for the node pool.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodePoolManagementUpgrade": {
        "description": "Representation of node pool management.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'NodePoolManagementUpgrade' if this is a complete object or 'NodePoolManagementUpgradeLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "max_surge": {
            "description": "Maximum number of nodes in the NodePool of a ROSA HCP cluster that can be scheduled above the desired number of nodes during the upgrade.",
            "type": "string"
          },
          "max_unavailable": {
            "description": "Maximum number of nodes in the NodePool of a ROSA HCP cluster that can be unavailable during the upgrade.",
            "type": "string"
          },
          "type": {
            "description": "Type of strategy for handling upgrades.",
            "type": "string"
          }
        }
      },
      "NodePoolStatus": {
        "description": "Representation of the status of a node pool.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'NodePoolStatus' if this is a complete object or 'NodePoolStatusLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "current_replicas": {
            "description": "The current number of replicas for the node pool.",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Adds additional information about the NodePool status when the node pool doesn't reach the desired replicas.",
            "type": "string"
          }
        }
      },
      "NodePoolUpgradePolicy": {
        "description": "Representation of an upgrade policy that can be set for a node pool.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'NodePoolUpgradePolicy' if this is a complete object or 'NodePoolUpgradePolicyLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "cluster_id": {
            "description": "Cluster ID this upgrade policy for node pool is defined for.",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "Timestamp for creation of resource.",
            "type": "string",
            "format": "date-time"
          },
          "enable_minor_version_upgrades": {
            "description": "Indicates if minor version upgrades are allowed for automatic upgrades (for manual it's always allowed).",
            "type": "boolean"
          },
          "last_update_timestamp": {
            "description": "Timestamp for last update that happened to resource.",
            "type": "string",
            "format": "date-time"
          },
          "next_run": {
            "description": "Next time the upgrade should run.",
            "type": "string",
            "format": "date-time"
          },
          "node_pool_id": {
            "description": "Node Pool ID this upgrade policy is defined for.",
            "type": "string"
          },
          "schedule": {
            "description": "Schedule cron expression that defines automatic upgrade scheduling.",
            "type": "string"
          },
          "schedule_type": {
            "description": "Schedule type of the upgrade.",
            "$ref": "#/components/schemas/ScheduleType"
          },
          "state": {
            "description": "State of the upgrade policy for the node pool.",
            "$ref": "#/components/schemas/UpgradePolicyState"
          },
          "upgrade_type": {
            "description": "Upgrade type of the node pool.",
            "$ref": "#/components/schemas/UpgradeType"
          },
          "version": {
            "description": "Version is the desired upgrade version.",
            "type": "string"
          }
        }
      },
      "NodeType": {
        "description": "Type of node received via telemetry.",
        "type": "string",
        "enum": [
          "compute",
          "infra",
          "master"
        ]
      },
      "NodesInfo": {
        "description": "Provides information about the nodes in the cluster.",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeInfo"
            }
          }
        }
      },
      "OidcConfig": {
        "description": "Contains the necessary attributes to support oidc configuration hosting under Red Hat or registering a Customer's byo oidc config.",
        "properties": {
          "href": {
            "description": "HREF for the oidc config, filled in response.",
            "type": "string"
          },
          "id": {
            "description": "ID for the oidc config, filled in response.",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "Creation timestamp, filled in response.",
            "type": "string",
            "format": "date-time"
          },
          "installer_role_arn": {
            "description": "ARN of the AWS role to assume when installing the cluster as to reveal the secret, supplied in request. It is only to be used in Unmanaged Oidc Config.",
            "type": "string"
          },
          "issuer_url": {
            "description": "Issuer URL, filled in response when Managed and supplied in Unmanaged.",
            "type": "string"
          },
          "last_update_timestamp": {
            "description": "Last update timestamp, filled when patching a valid attribute of this oidc config.",
            "type": "string",
            "format": "date-time"
          },
          "last_used_timestamp": {
            "description": "Last used timestamp, filled by the latest cluster that used this oidc config.",
            "type": "string",
            "format": "date-time"
          },
          "managed": {
            "description": "Indicates whether it is Managed or Unmanaged (Customer hosted).",
            "type": "boolean"
          },
          "organization_id": {
            "description": "Organization ID, filled in response respecting token provided.",
            "type": "string"
          },
          "reusable": {
            "description": "Indicates whether the Oidc Config can be reused.",
            "type": "boolean"
          },
          "secret_arn": {
            "description": "Secrets Manager ARN for the OIDC private key, supplied in request. It is only to be used in Unmanaged Oidc Config.",
            "type": "string"
          }
        }
      },
      "OpenIDClaims": {
        "description": "_OpenID_ identity provider claims.",
        "properties": {
          "email": {
            "description": "List of claims to use as the mail address.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "List of claims to use as the group name.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "List of claims to use as the display name.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preferred_username": {
            "description": "List of claims to use as the preferred user name when provisioning a user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OpenIDIdentityProvider": {
        "description": "Details for `openid` identity providers.",
        "properties": {
          "ca": {
            "description": "Certificate bunde to use to validate server certificates for the configured URL.",
            "type": "string"
          },
          "claims": {
            "description": "Claims used to configure the provider.",
            "$ref": "#/components/schemas/OpenIDClaims"
          },
          "client_id": {
            "description": "Identifier of a client registered with the _OpenID_ provider.",
            "type": "string"
          },
          "client_secret": {
            "description": "Client secret.",
            "type": "string"
          },
          "extra_authorize_parameters": {
            "description": "Optional map of extra parameters to add to the authorization token request.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "extra_scopes": {
            "description": "Optional list of scopes to request, in addition to the `openid` scope, during the\nauthorization token request.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "description": "The URL that the OpenID Provider asserts as the Issuer Identifier",
            "type": "string"
          }
        }
      },
      "OperatorIAMRole": {
        "description": "Contains the necessary attributes to allow each operator to access the necessary AWS resources",
        "properties": {
          "id": {
            "description": "Randomly-generated ID to identify the operator role",
            "type": "string"
          },
          "name": {
            "description": "Name of the credentials secret used to access cloud resources",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace where the credentials secret lives in the cluster",
            "type": "string"
          },
          "role_arn": {
            "description": "Role to assume when accessing AWS resources",
            "type": "string"
          },
          "service_account": {
            "description": "Service account name to use when authenticating",
            "type": "string"
          }
        }
      },
      "OrganizationLink": {
        "description": "Definition of an organization link.",
        "properties": {
          "href": {
            "description": "HREF for the Organization, filled in response.",
            "type": "string"
          },
          "id": {
            "description": "The organization's ID.",
            "type": "string"
          }
        }
      },
      "PendingDeleteCluster": {
        "description": "Represents a pending delete entry for a specific cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'PendingDeleteCluster' if this is a complete object or 'PendingDeleteClusterLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "best_effort": {
            "description": "Flag indicating if the cluster deletion should be best-effort mode or not.",
            "type": "boolean"
          },
          "cluster": {
            "description": "Cluster is the details of the cluster that is pending deletion.",
            "$ref": "#/components/schemas/Cluster"
          },
          "creation_timestamp": {
            "description": "Date and time when the cluster was initially created, using the\nformat defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Platform": {
        "description": "Representation of an platform type field.",
        "type": "string",
        "enum": [
          "aws",
          "aws-classic",
          "aws-hosted-cp",
          "gcp",
          "hostedcluster"
        ]
      },
      "PrivateLinkClusterConfiguration": {
        "description": "Manages the configuration for the Private Links.",
        "properties": {
          "principals": {
            "description": "List of additional principals for the Private Link",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivateLinkPrincipal"
            }
          }
        }
      },
      "PrivateLinkConfiguration": {
        "description": "Manages the configuration for the Private Links.",
        "properties": {
          "principals": {
            "description": "List of additional principals for the Private Link",
            "$ref": "#/components/schemas/PrivateLinkPrincipals"
          }
        }
      },
      "PrivateLinkPrincipal": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'PrivateLinkPrincipal' if this is a complete object or 'PrivateLinkPrincipalLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "principal": {
            "description": "ARN for a principal that is allowed for this Private Link.",
            "type": "string"
          }
        }
      },
      "PrivateLinkPrincipals": {
        "description": "Contains a list of principals for the Private Link.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'PrivateLinkPrincipals' if this is a complete object or 'PrivateLinkPrincipalsLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "principals": {
            "description": "List of additional principals for the Private Link",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivateLinkPrincipal"
            }
          }
        }
      },
      "ProcessorType": {
        "description": "Processor type category.",
        "type": "string",
        "enum": [
          "amd64",
          "arm64"
        ]
      },
      "Product": {
        "description": "Representation of an product that can be selected as a cluster type.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Product' if this is a complete object or 'ProductLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "name": {
            "description": "Name of the product.",
            "type": "string"
          }
        }
      },
      "ProductMinimalVersion": {
        "description": "Representation of a product minimal version.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ProductMinimalVersion' if this is a complete object or 'ProductMinimalVersionLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "rosa_cli": {
            "description": "The ROSA CLI minimal version.",
            "type": "string"
          },
          "start_date": {
            "description": "The start date for this minimal version.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductTechnologyPreview": {
        "description": "Representation of a product technology preview.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ProductTechnologyPreview' if this is a complete object or 'ProductTechnologyPreviewLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "additional_text": {
            "description": "Message associated with this technology preview.",
            "type": "string"
          },
          "end_date": {
            "description": "The end date for this technology preview.",
            "type": "string",
            "format": "date-time"
          },
          "start_date": {
            "description": "The start date for this technology preview.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProvisionShard": {
        "description": "Contains the properties of the provision shard, including AWS and GCP related configurations",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ProvisionShard' if this is a complete object or 'ProvisionShardLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "aws_account_operator_config": {
            "description": "Contains the configuration for the AWS account operator.",
            "$ref": "#/components/schemas/ServerConfig"
          },
          "aws_base_domain": {
            "description": "Contains the AWS base domain.",
            "type": "string"
          },
          "gcp_base_domain": {
            "description": "Contains the GCP base domain.",
            "type": "string"
          },
          "gcp_project_operator": {
            "description": "Contains the configuration for the GCP project operator.",
            "$ref": "#/components/schemas/ServerConfig"
          },
          "cloud_provider": {
            "description": "Contains the cloud provider name.",
            "$ref": "#/components/schemas/CloudProvider"
          },
          "creation_timestamp": {
            "description": "Date and time when the provision shard was initially created, using the\nformat defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).",
            "type": "string",
            "format": "date-time"
          },
          "hive_config": {
            "description": "Contains the configuration for Hive.",
            "$ref": "#/components/schemas/ServerConfig"
          },
          "hypershift_config": {
            "description": "Contains the configuration for Hypershift.",
            "$ref": "#/components/schemas/ServerConfig"
          },
          "last_update_timestamp": {
            "description": "Date and time when the provision shard was last updated, using the\nformat defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).",
            "type": "string",
            "format": "date-time"
          },
          "management_cluster": {
            "description": "Contains the name of the management cluster for Hypershift clusters that are assigned to this shard.\nThis field is populated by OCM, and must not be overwritten via API.",
            "type": "string"
          },
          "region": {
            "description": "Contains the cloud-provider region in which the provisioner spins up the cluster.",
            "$ref": "#/components/schemas/CloudRegion"
          },
          "status": {
            "description": "Status of the provision shard. Possible values: active/maintenance/offline.",
            "type": "string"
          }
        }
      },
      "ProvisionShardTopology": {
        "type": "string",
        "enum": [
          "dedicated"
        ]
      },
      "Proxy": {
        "description": "Proxy configuration of a cluster.",
        "properties": {
          "http_proxy": {
            "description": "HTTPProxy is the URL of the proxy for HTTP requests.",
            "type": "string"
          },
          "https_proxy": {
            "description": "HTTPSProxy is the URL of the proxy for HTTPS requests.",
            "type": "string"
          },
          "no_proxy": {
            "description": "NoProxy is a comma-separated list of domains and CIDRs for which \nthe proxy should not be used",
            "type": "string"
          }
        }
      },
      "ReleaseImageDetails": {
        "properties": {
          "available_upgrades": {
            "description": "AvailableUpgrades is the list of versions this version can be upgraded to.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "release_image": {
            "description": "ReleaseImage contains the URI of Openshift release image.",
            "type": "string"
          }
        }
      },
      "ReleaseImages": {
        "properties": {
          "arm64": {
            "description": "Arm64 will contain the reference for the arm64 image which will be used for cluster deployments",
            "$ref": "#/components/schemas/ReleaseImageDetails"
          },
          "multi": {
            "description": "Multi will contain the reference for the multi image which will be used for cluster deployments",
            "$ref": "#/components/schemas/ReleaseImageDetails"
          }
        }
      },
      "ResourceRange": {
        "properties": {
          "max": {
            "type": "integer",
            "format": "int32"
          },
          "min": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RolePolicy": {
        "properties": {
          "arn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RolePolicyBinding": {
        "properties": {
          "arn": {
            "type": "string"
          },
          "creation_timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "last_update_timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            }
          },
          "status": {
            "$ref": "#/components/schemas/RolePolicyBindingStatus"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RolePolicyBindingStatus": {
        "properties": {
          "description": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RootVolume": {
        "description": "Root volume capabilities.",
        "properties": {
          "aws": {
            "description": "AWS volume specification",
            "$ref": "#/components/schemas/AWSVolume"
          },
          "gcp": {
            "description": "GCP Volume specification",
            "$ref": "#/components/schemas/GCPVolume"
          }
        }
      },
      "ScheduleType": {
        "description": "ScheduleType defines which type of scheduling should be used for the upgrade policy.",
        "type": "string",
        "enum": [
          "automatic",
          "manual"
        ]
      },
      "SecurityGroup": {
        "description": "AWS security group object",
        "properties": {
          "id": {
            "description": "The security group ID.",
            "type": "string"
          },
          "name": {
            "description": "Name of the security group according to its `Name` tag on AWS.",
            "type": "string"
          },
          "red_hat_managed": {
            "description": "If the resource is RH managed.",
            "type": "boolean"
          }
        }
      },
      "ServerConfig": {
        "description": "Representation of a server config",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ServerConfig' if this is a complete object or 'ServerConfigLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "kubeconfig": {
            "description": "The kubeconfig of the server.",
            "type": "string"
          },
          "server": {
            "description": "The URL of the server.",
            "type": "string"
          },
          "topology": {
            "description": "The topology of a provision shard (Optional).",
            "$ref": "#/components/schemas/ProvisionShardTopology"
          }
        }
      },
      "SocketTotalNodeRoleOSMetricNode": {
        "description": "Representation of information from telemetry about a the socket capacity\nby node role and OS.",
        "properties": {
          "node_roles": {
            "description": "Representation of the node role for a cluster.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operating_system": {
            "description": "The operating system.",
            "type": "string"
          },
          "socket_total": {
            "description": "The total socket capacity of nodes with this set of roles and operating system.",
            "type": "number",
            "format": "float"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SocketTotalsNodeRoleOSMetricNode": {
        "description": "Representation of information from telemetry about the socket capacity by node\nrole and OS of a cluster.",
        "properties": {
          "socket_totals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocketTotalNodeRoleOSMetricNode"
            }
          }
        }
      },
      "StorageQuota": {
        "description": "Representation of a storage quota ",
        "properties": {
          "unit": {
            "description": "Unit of storage",
            "type": "string"
          },
          "value": {
            "description": "Numerical value",
            "type": "number",
            "format": "float"
          }
        }
      },
      "StsSupportJumpRole": {
        "description": "Isolated STS support role created per organization.",
        "properties": {
          "role_arn": {
            "description": "ARN of the support role created in the SRE jump account.",
            "type": "string"
          }
        }
      },
      "SubnetNetworkVerification": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'SubnetNetworkVerification' if this is a complete object or 'SubnetNetworkVerificationLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "details": {
            "description": "Slice of failures that happened during a subnet network verification.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platform": {
            "description": "Platform supplied to the network verifier for this subnet.",
            "$ref": "#/components/schemas/Platform"
          },
          "state": {
            "description": "State of the subnet network verification.",
            "type": "string"
          },
          "tags": {
            "description": "Tags supplied to the network verifier for this subnet.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Subnetwork": {
        "description": "AWS subnetwork object to be used while installing a cluster",
        "properties": {
          "cidr_block": {
            "description": "The CIDR Block of the subnet.",
            "type": "string"
          },
          "availability_zone": {
            "description": "The availability zone to which the subnet is related.",
            "type": "string"
          },
          "name": {
            "description": "Name of the subnet according to its `Name` tag on AWS.",
            "type": "string"
          },
          "public": {
            "description": "Whether or not it is a public subnet.",
            "type": "boolean"
          },
          "red_hat_managed": {
            "description": "If the resource is RH managed.",
            "type": "boolean"
          },
          "subnet_id": {
            "description": "The subnet ID to be used while installing a cluster.",
            "type": "string"
          }
        }
      },
      "Subscription": {
        "description": "Definition of a subscription.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Subscription' if this is a complete object or 'SubscriptionLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          }
        }
      },
      "Syncset": {
        "description": "Representation of a syncset.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Syncset' if this is a complete object or 'SyncsetLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "resources": {
            "description": "List of k8s objects to configure for the cluster.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Taint": {
        "description": "Representation of a Taint set on a MachinePool in a cluster.",
        "properties": {
          "effect": {
            "description": "The effect on the node for the pods matching the taint, i.e: NoSchedule, NoExecute, PreferNoSchedule.",
            "type": "string"
          },
          "key": {
            "description": "The key for the taint",
            "type": "string"
          },
          "value": {
            "description": "The value for the taint.",
            "type": "string"
          }
        }
      },
      "TokenClaimMappings": {
        "description": "The claim mappings defined for users and groups.",
        "properties": {
          "groups": {
            "description": "Groups is a name of the claim that should be used to construct groups for the cluster identity.",
            "$ref": "#/components/schemas/GroupsClaim"
          },
          "username": {
            "description": "Username is a name of the claim that should be used to construct usernames for the cluster identity.",
            "$ref": "#/components/schemas/UsernameClaim"
          }
        }
      },
      "TokenClaimValidationRule": {
        "description": "The rule that is applied to validate token claims to authenticate users.",
        "properties": {
          "claim": {
            "description": "Claim is a name of a required claim.",
            "type": "string"
          },
          "required_value": {
            "description": "RequiredValue is the required value for the claim.",
            "type": "string"
          }
        }
      },
      "TokenIssuer": {
        "description": "Representation of a token issuer used in an external authentication.",
        "properties": {
          "ca": {
            "description": "Certificate bundle to use to validate server certificates for the configured URL.",
            "type": "string"
          },
          "url": {
            "description": "URL is the serving URL of the token issuer.",
            "type": "string"
          },
          "audiences": {
            "description": "Audiences is an array of audiences that the token was issued for.\nValid tokens must include at least one of these values in their\n\"aud\" claim.\nMust be set to exactly one value.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TrustedIp": {
        "description": "Representation of a trusted ip address in clusterdeployment.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'TrustedIp' if this is a complete object or 'TrustedIpLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "enabled": {
            "description": "The boolean set to show if the ip is enabled.",
            "type": "boolean"
          }
        }
      },
      "TuningConfig": {
        "description": "Representation of a tuning config.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'TuningConfig' if this is a complete object or 'TuningConfigLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "name": {
            "description": "Name of the tuning config.",
            "type": "string"
          },
          "spec": {
            "description": "Spec of the tuning config.",
            "type": "object"
          }
        }
      },
      "UpgradePolicy": {
        "description": "Representation of an upgrade policy that can be set for a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'UpgradePolicy' if this is a complete object or 'UpgradePolicyLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "cluster_id": {
            "description": "Cluster ID this upgrade policy is defined for.",
            "type": "string"
          },
          "enable_minor_version_upgrades": {
            "description": "Indicates if minor version upgrades are allowed for automatic upgrades (for manual it's always allowed).",
            "type": "boolean"
          },
          "next_run": {
            "description": "Next time the upgrade should run.",
            "type": "string",
            "format": "date-time"
          },
          "schedule": {
            "description": "Schedule cron expression that defines automatic upgrade scheduling.",
            "type": "string"
          },
          "schedule_type": {
            "description": "Schedule type of the upgrade.",
            "$ref": "#/components/schemas/ScheduleType"
          },
          "upgrade_type": {
            "description": "Upgrade type specify the type of the upgrade.",
            "$ref": "#/components/schemas/UpgradeType"
          },
          "version": {
            "description": "Version is the desired upgrade version.",
            "type": "string"
          }
        }
      },
      "UpgradePolicyState": {
        "description": "Representation of an upgrade policy state that that is set for a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'UpgradePolicyState' if this is a complete object or 'UpgradePolicyStateLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "description": {
            "description": "Description of the state.",
            "type": "string"
          },
          "value": {
            "description": "State value can be 'pending', 'scheduled', 'cancelled', 'started', 'delayed', \n'failed' or 'completed'.",
            "$ref": "#/components/schemas/UpgradePolicyStateValue"
          }
        }
      },
      "UpgradePolicyStateValue": {
        "description": "Overall state of a cluster upgrade policy.",
        "type": "string",
        "enum": [
          "cancelled",
          "completed",
          "delayed",
          "failed",
          "pending",
          "scheduled",
          "started"
        ]
      },
      "UpgradeType": {
        "description": "UpgradeType defines which type of upgrade should be used.",
        "type": "string",
        "enum": [
          "OSD",
          "ADDON",
          "ControlPlane",
          "NodePool"
        ]
      },
      "User": {
        "description": "Representation of a user.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'User' if this is a complete object or 'UserLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          }
        }
      },
      "UsernameClaim": {
        "description": "The username claim mapping.",
        "properties": {
          "claim": {
            "description": "The claim used in the token.",
            "type": "string"
          },
          "prefix": {
            "description": "A prefix contatenated in the claim (Optional).",
            "type": "string"
          },
          "prefix_policy": {
            "description": "PrefixPolicy specifies how a prefix should apply.\n\nBy default, claims other than `email` will be prefixed with the issuer URL to\nprevent naming clashes with other plugins.\n\nSet to \"NoPrefix\" to disable prefixing.",
            "type": "string"
          }
        }
      },
      "Value": {
        "description": "Numeric value and the unit used to measure it.\n\nUnits are not mandatory, and they're not specified for some resources. For\nresources that use bytes, the accepted units are:\n\n- 1 B = 1 byte\n- 1 KB = 10^3 bytes\n- 1 MB = 10^6 bytes\n- 1 GB = 10^9 bytes\n- 1 TB = 10^12 bytes\n- 1 PB = 10^15 bytes\n\n- 1 B = 1 byte\n- 1 KiB = 2^10 bytes\n- 1 MiB = 2^20 bytes\n- 1 GiB = 2^30 bytes\n- 1 TiB = 2^40 bytes\n- 1 PiB = 2^50 bytes",
        "properties": {
          "unit": {
            "description": "Name of the unit used to measure the value.",
            "type": "string"
          },
          "value": {
            "description": "Numeric value.",
            "type": "number",
            "format": "float"
          }
        }
      },
      "Version": {
        "description": "Representation of an _OpenShift_ version.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Version' if this is a complete object or 'VersionLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "gcp_marketplace_enabled": {
            "description": "GCPMarketplaceEnabled indicates if this version can be used to create GCP Marketplace clusters.",
            "type": "boolean"
          },
          "rosa_enabled": {
            "description": "ROSAEnabled indicates whether this version can be used to create ROSA clusters.",
            "type": "boolean"
          },
          "available_upgrades": {
            "description": "AvailableUpgrades is the list of versions this version can be upgraded to.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel_group": {
            "description": "ChannelGroup is the name of the group where this image belongs.\nChannelGroup is a mechanism to partition the images to different groups,\neach image belongs to only a single group.",
            "type": "string"
          },
          "default": {
            "description": "Indicates if this should be selected as the default version when a cluster is created\nwithout specifying explicitly the version.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Indicates if this version can be used to create clusters.",
            "type": "boolean"
          },
          "end_of_life_timestamp": {
            "description": "EndOfLifeTimestamp is the date and time when the version will get to End of Life, using the\nformat defined in https://www.ietf.org/rfc/rfc3339.txt[RC3339].",
            "type": "string",
            "format": "date-time"
          },
          "hosted_control_plane_default": {
            "description": "HostedControlPlaneDefault is a flag that indicates if this should be selected as the default version when a\nHCP cluster is created without specifying explicitly the version.",
            "type": "boolean"
          },
          "hosted_control_plane_enabled": {
            "description": "HostedControlPlaneEnabled indicates whether this version can be used to create HCP clusters.",
            "type": "boolean"
          },
          "image_overrides": {
            "description": "ImageOverrides contains the lists of images per cloud provider.",
            "$ref": "#/components/schemas/ImageOverrides"
          },
          "raw_id": {
            "description": "RawID is the id of the version - without channel group and prefix.",
            "type": "string"
          },
          "release_image": {
            "description": "ReleaseImage contains the URI of Openshift release image for amd64 architecture.",
            "type": "string"
          },
          "release_images": {
            "description": "ReleaseImages contains the URI of OpenShift release images for arm64 and multi architectures.",
            "$ref": "#/components/schemas/ReleaseImages"
          }
        }
      },
      "VersionGate": {
        "description": "Representation of an _OpenShift_ version gate.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'VersionGate' if this is a complete object or 'VersionGateLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "sts_only": {
            "description": "STSOnly indicates if this version gate is for STS clusters only",
            "type": "boolean"
          },
          "creation_timestamp": {
            "description": "CreationTimestamp is the date and time when the version gate was created,\nformat defined in https://www.ietf.org/rfc/rfc3339.txt[RC3339].",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Description of the version gate.",
            "type": "string"
          },
          "documentation_url": {
            "description": "DocumentationURL is the URL for the documentation of the version gate.",
            "type": "string"
          },
          "label": {
            "description": "Label representing the version gate in OpenShift.",
            "type": "string"
          },
          "value": {
            "description": "Value represents the required value of the label.",
            "type": "string"
          },
          "version_raw_id_prefix": {
            "description": "VersionRawIDPrefix represents the versions prefix that the gate applies to.",
            "type": "string"
          },
          "warning_message": {
            "description": "WarningMessage is a warning that will be displayed to the user before they acknowledge the gate",
            "type": "string"
          }
        }
      },
      "VersionGateAgreement": {
        "description": "VersionGateAgreement represents a version gate that the user agreed to for a specific cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'VersionGateAgreement' if this is a complete object or 'VersionGateAgreementLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "agreed_timestamp": {
            "description": "The time the user agreed to the version gate",
            "type": "string",
            "format": "date-time"
          },
          "version_gate": {
            "description": "link to the version gate that the user agreed to",
            "$ref": "#/components/schemas/VersionGate"
          }
        }
      },
      "WifAccessMethod": {
        "type": "string",
        "enum": [
          "impersonate",
          "wif"
        ]
      },
      "WifConfig": {
        "description": "Definition of an wif_config resource.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'WifConfig' if this is a complete object or 'WifConfigLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "display_name": {
            "description": "The name OCM clients will display for this wif_config.",
            "type": "string"
          },
          "gcp": {
            "description": "Holds GCP related data.",
            "$ref": "#/components/schemas/WifGcp"
          },
          "organization": {
            "description": "The OCM organization that this wif_config resource belongs to.",
            "$ref": "#/components/schemas/OrganizationLink"
          }
        }
      },
      "WifCredentialRequest": {
        "properties": {
          "secret_ref": {
            "$ref": "#/components/schemas/WifSecretRef"
          },
          "service_account_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WifGcp": {
        "properties": {
          "impersonator_email": {
            "description": "This is the service account email that OCM will use to access other SAs. ",
            "type": "string"
          },
          "project_id": {
            "description": "This represents the GCP project ID in which the wif resources will be configured.",
            "type": "string"
          },
          "project_number": {
            "description": "This represents the GCP project number in which the wif resources will be configured.",
            "type": "string"
          },
          "service_accounts": {
            "description": "The list of service accounts and their associated roles that will need to be\nconfigured on the user's GCP project.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WifServiceAccount"
            }
          },
          "workload_identity_pool": {
            "description": "The workload identity configuration data that will be used to create the\nworkload identity pool on the user's account.",
            "$ref": "#/components/schemas/WifPool"
          }
        }
      },
      "WifIdentityProvider": {
        "properties": {
          "allowed_audiences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identity_provider_id": {
            "type": "string"
          },
          "issuer_url": {
            "type": "string"
          },
          "jwks": {
            "type": "string"
          }
        }
      },
      "WifPool": {
        "properties": {
          "identity_provider": {
            "description": "Identity provider configuration data that will be created as part of the\nworkload identity pool.",
            "$ref": "#/components/schemas/WifIdentityProvider"
          },
          "pool_id": {
            "description": "The Id of the workload identity pool.",
            "type": "string"
          },
          "pool_name": {
            "description": "The display name of the workload identity pool.",
            "type": "string"
          }
        }
      },
      "WifRole": {
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "predefined": {
            "type": "boolean"
          },
          "role_id": {
            "type": "string"
          }
        }
      },
      "WifSecretRef": {
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        }
      },
      "WifServiceAccount": {
        "properties": {
          "access_method": {
            "$ref": "#/components/schemas/WifAccessMethod"
          },
          "credential_request": {
            "$ref": "#/components/schemas/WifCredentialRequest"
          },
          "osd_role": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WifRole"
            }
          },
          "service_account_id": {
            "type": "string"
          }
        }
      },
      "WildcardPolicy": {
        "description": "Type of wildcard policy.",
        "type": "string",
        "enum": [
          "WildcardsAllowed",
          "WildcardsDisallowed"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will always be 'Error'",
            "type": "string"
          },
          "id": {
            "description": "Numeric identifier of the error.",
            "type": "integer",
            "format": "int32"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "code": {
            "description": "Globally unique code of the error, composed of the unique identifier of the API and the numeric identifier of the error. For example, for if the numeric identifier of the error is `93` and the identifier of the API is `clusters_mgmt` then the code will be `CLUSTERS-MGMT-93`.",
            "type": "string"
          },
          "reason": {
            "description": "Human readable description of the error.",
            "type": "string"
          },
          "details": {
            "description": "Extra information about the error.",
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearer": [
        
      ]
    }
  ]
}