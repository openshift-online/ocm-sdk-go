{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "accounts_mgmt",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "OCM Feedback",
      "email": "ocm-feedback@redhat.com"
    }
  },
  "servers": [
    {
      "description": "Production",
      "url": "https://api.openshift.com"
    },
    {
      "description": "Stage",
      "url": "https://api.stage.openshift.com"
    }
  ],
  "paths": {
    "/api/accounts_mgmt/v1": {
      "get": {
        "description": "Retrieves the version metadata.\n",
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/access_token": {
      "post": {
        "description": "Returns access token generated from registries in docker format.\n",
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/accounts": {
      "post": {
        "description": "Creates a new account.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of accounts.\n",
        "parameters": [
          {
            "name": "fetchlabels_labels",
            "description": "If true, includes the labels on an account in the output. Could slow request response time.\n",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "description": "Projection\nThis field contains a comma-separated list of fields you'd like to get in\na result. No new fields can be added, only existing ones can be filtered.\nTo specify a field 'id' of a structure 'plan' use 'plan.id'.\nTo specify all fields of a structure 'labels' use 'labels.*'.\n\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement. For example, in order to sort the\naccounts descending by name identifier the value should be:\n\n\n```\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the account\ninstead of the names of the columns of a table. For example, in order to\nretrieve accounts with username starting with my:\n\n\n```\nusername like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of accounts.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/accounts/{account_id}": {
      "get": {
        "description": "Retrieves the details of the account.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the account.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/accounts/{account_id}/labels": {
      "post": {
        "description": "Create a new account/organization/subscription label.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of labels of the account/organization/subscription.\n\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of labels\nof the account/organization/subscription.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nlabels of the account/organization/subscription.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud providers.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nlabels of the account/organization/subscription.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of labels of the account/organization/subscription.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/accounts/{account_id}/labels/{labels_id}": {
      "delete": {
        "description": "Deletes the account label.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the label.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the account label.\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/cluster_authorizations": {
      "post": {
        "description": "Authorizes new cluster creation against an existing subscription.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterAuthorizationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAuthorizationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/cluster_registrations": {
      "post": {
        "description": "Finds or creates a cluster registration with a registry credential\ntoken and cluster identifier.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRegistrationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/current_access": {
      "post": {
        "description": "Creates a new role.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves a list of roles.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the role\ninstead of the names of the columns of a table. For example, in order to\nretrieve roles named starting with `Organization`:\n\n\n```\nname like 'Organization%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of roles.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/current_access/{role_id}": {
      "delete": {
        "description": "Deletes the role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/current_account": {
      "get": {
        "description": "Retrieves the details of the account.\n",
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/feature_toggles/{feature_toggle_id}/query": {
      "post": {
        "description": "Retrieves the details of the feature toggle by providing query context\n",
        "parameters": [
          {
            "name": "feature_toggle_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureToggleQueryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureToggle"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/labels": {
      "get": {
        "description": "Retrieves a list of labels.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the organization\ninstead of the names of the columns of a table. For example, in order to\nretrieve labels with name starting with my:\n\n\n```\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of labels.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/notify": {
      "post": {
        "description": "Notify user related to subscription/cluster via email\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionNotify"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionNotify"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations": {
      "post": {
        "description": "Creates a new organization.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves a list of organizations.\n",
        "parameters": [
          {
            "name": "fetchlabels_labels",
            "description": "If true, includes the labels on an organization in the output. Could slow request response time.\n",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "description": "Projection\nThis field contains a comma-separated list of fields you'd like to get in\na result. No new fields can be added, only existing ones can be filtered.\nTo specify a field 'id' of a structure 'plan' use 'plan.id'.\nTo specify all fields of a structure 'labels' use 'labels.*'.\n\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the organization\ninstead of the names of the columns of a table. For example, in order to\nretrieve organizations with name starting with my:\n\n\n```\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of organizations.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations/{organization_id}": {
      "get": {
        "description": "Retrieves the details of the organization.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the organization.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations/{organization_id}/labels": {
      "post": {
        "description": "Create a new account/organization/subscription label.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of labels of the account/organization/subscription.\n\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of labels\nof the account/organization/subscription.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nlabels of the account/organization/subscription.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud providers.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nlabels of the account/organization/subscription.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of labels of the account/organization/subscription.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations/{organization_id}/labels/{labels_id}": {
      "delete": {
        "description": "Deletes the account label.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the label.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the account label.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations/{organization_id}/quota_summary": {
      "get": {
        "description": "Retrieves the Quota summary.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the quota\nsummary instead of the names of the columns of a table. For example, in order\nto retrieve the quota summary for clusters that run in multiple availability\nzones:\n\n\n```\navailability_zone_type = 'multi'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved quota summary items.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QuotaSummary"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations/{organization_id}/resource_quota": {
      "post": {
        "description": "Creates a new resource quota.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceQuota"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of resource quotas.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the account\ninstead of the names of the columns of a table. For example, in order to\nretrieve resource quota with resource_type cluster.aws:\n\n\n```\nresource_type = 'cluster.aws'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of resource quotas.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResourceQuota"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/organizations/{organization_id}/resource_quota/{resource_quota_id}": {
      "delete": {
        "description": "Deletes the resource quota.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_quota_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the resource quota.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_quota_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the resource quota.\n",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_quota_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceQuota"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/permissions": {
      "post": {
        "description": "Creates a new permission.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves a list of permissions.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of permissions.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permission"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/permissions/{permission_id}": {
      "delete": {
        "description": "Deletes the permission.\n",
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the permission.\n",
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/pull_secrets": {
      "post": {
        "description": "Returns access token generated from registries in docker format.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullSecretsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/pull_secrets/{pull_secret_id}": {
      "delete": {
        "description": "Deletes the pull secret.\n",
        "parameters": [
          {
            "name": "pull_secret_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/registries": {
      "get": {
        "description": "Retrieves a list of registries.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of registries.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Registry"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/registries/{registry_id}": {
      "get": {
        "description": "Retrieves the details of the registry.\n",
        "parameters": [
          {
            "name": "registry_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/registry_credentials": {
      "post": {
        "description": "Creates a new registry credential.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryCredential"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryCredential"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of accounts.\n",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement. For example, in order to sort the\nRegistryCredentials descending by username the value should be:\n\n\n```\nusername desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the RegistryCredentials instead\nof the names of the columns of a table. For example, in order to retrieve all the\nRegistryCredentials for a user the value should be:\n\n\n```\nusername = 'abcxyz...'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nRegistryCredentials that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of registry credentials.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistryCredential"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/registry_credentials/{registry_credential_id}": {
      "get": {
        "description": "Retrieves the details of the registry credential.\n",
        "parameters": [
          {
            "name": "registry_credential_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryCredential"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/resource_quota": {
      "post": {
        "description": "Creates a new resource quota.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceQuota"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of resource quotas.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the account\ninstead of the names of the columns of a table. For example, in order to\nretrieve resource quota with resource_type cluster.aws:\n\n\n```\nresource_type = 'cluster.aws'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of resource quotas.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResourceQuota"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/resource_quota/{resource_quota_id}": {
      "delete": {
        "description": "Deletes the resource quota.\n",
        "parameters": [
          {
            "name": "resource_quota_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the resource quota.\n",
        "parameters": [
          {
            "name": "resource_quota_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the resource quota.\n",
        "parameters": [
          {
            "name": "resource_quota_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceQuota"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceQuota"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/role_bindings": {
      "post": {
        "description": "Creates a new role binding.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBinding"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves a list of role bindings.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the role binding\ninstead of the names of the columns of a table. For example, in order to\nretrieve role bindings with role_id AuthenticatedUser:\n\n\n```\nrole_id = 'AuthenticatedUser'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of role bindings.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RoleBinding"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/role_bindings/{role_binding_id}": {
      "delete": {
        "description": "Deletes the role binding.\n",
        "parameters": [
          {
            "name": "role_binding_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the role binding.\n",
        "parameters": [
          {
            "name": "role_binding_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the account.\n",
        "parameters": [
          {
            "name": "role_binding_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBinding"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/roles": {
      "post": {
        "description": "Creates a new role.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves a list of roles.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the role\ninstead of the names of the columns of a table. For example, in order to\nretrieve roles named starting with `Organization`:\n\n\n```\nname like 'Organization%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of roles.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/roles/{role_id}": {
      "delete": {
        "description": "Deletes the role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the role.\n",
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/skus": {
      "get": {
        "description": "Retrieves a list of SKUS.\n",
        "parameters": [
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause\nof an SQL statement, but using the names of the attributes of the SKU\ninstead of the names of the columns of a table. For example, in order to\nretrieve SKUS large sized resources:\n\n\n```\nresource_name like '%large'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nitems that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of SKUS.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SKU"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/skus/{sku_id}": {
      "get": {
        "description": "Retrieves the details of the SKU.\n",
        "parameters": [
          {
            "name": "sku_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SKU"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions": {
      "get": {
        "description": "Retrieves a list of subscriptions.\n",
        "parameters": [
          {
            "name": "fetchaccounts_accounts",
            "description": "If true, includes the account reference information in the output. Could slow request response time.\n",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fetchlabels_labels",
            "description": "If true, includes the labels on a subscription in the output. Could slow request response time.\n",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "description": "Projection\nThis field contains a comma-separated list of fields you'd like to get in\na result. No new fields can be added, only existing ones can be filtered.\nTo specify a field 'id' of a structure 'plan' use 'plan.id'.\nTo specify all fields of a structure 'labels' use 'labels.*'.\n\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels",
            "description": "Filter subscriptions by a comma separated list of labels:\n\n[source]\n```\nenv=staging,department=sales\n```\n\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement. For example, in order to sort the\nsubscriptions descending by name identifier the value should be:\n\n\n```\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of a\nSQL statement, but using the names of the attributes of the subscription instead\nof the names of the columns of a table. For example, in order to retrieve all the\nsubscriptions for managed clusters the value should be:\n\n\n```\nmanaged = 't'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the\nclusters that the user has permission to see will be returned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of subscriptions.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subscription_id}": {
      "delete": {
        "description": "Deletes the subscription by ID.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the subscription by ID.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a subscription\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subscription_id}/labels": {
      "post": {
        "description": "Create a new account/organization/subscription label.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of labels of the account/organization/subscription.\n\nIMPORTANT: This collection doesn't currently support paging or searching, so the returned\n`page` will always be 1 and `size` and `total` will always be the total number of labels\nof the account/organization/subscription.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nlabels of the account/organization/subscription.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of cloud providers.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "page": {
                      "description": "Index of the returned page, where one corresponds to the first page. As this\ncollection doesn't support paging the result will always be `1`.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Number of items that will be contained in the returned page. As this collection\ndoesn't support paging or searching the result will always be the total number of\nlabels of the account/organization/subscription.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page. As this collection doesn't support paging or\nsearching the result will always be the total number of labels of the account/organization/subscription.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subscription_id}/labels/{labels_id}": {
      "delete": {
        "description": "Deletes the account label.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the label.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the account label.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subscription_id}/notify": {
      "post": {
        "description": "Notify user related to subscription via email\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionNotify"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionNotify"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subscription_id}/reserved_resources": {
      "get": {
        "description": "Retrieves items of the collection of reserved resources by the subscription.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.\n",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of reserved resources.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReservedResource"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.\n",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.\n",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subscription_id}/reserved_resources/{reserved_resource_id}": {
      "get": {
        "description": "Retrieves the reserved resource.\n",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reserved_resource_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservedResource"
                }
              }
            }
          },
          "default": {
            "description": "Error.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Metadata": {
        "description": "Version metadata.\n",
        "properties": {
          "server_version": {
            "description": "Version of the server.\n",
            "type": "string"
          }
        }
      },
      "SKU": {
        "description": "Identifies computing resources\n",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'SKU' if this is a complete object or 'SKULink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "byoc": {
            "type": "boolean"
          },
          "availability_zone_type": {
            "type": "string"
          },
          "resource_name": {
            "description": "platform-specific name, such as \"M5.2Xlarge\" for a type of EC2 node\n",
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        }
      },
      "AccessToken": {
        "properties": {
          "auths": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AccessTokenAuth"
            }
          }
        }
      },
      "AccessTokenAuth": {
        "properties": {
          "auth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Account": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Account' if this is a complete object or 'AccountLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "ban_code": {
            "type": "string"
          },
          "ban_description": {
            "type": "string"
          },
          "banned": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "last_name": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "service_account": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Action": {
        "description": "Possible actions for a permission.\n",
        "type": "string",
        "enum": [
          "create",
          "delete",
          "get",
          "list",
          "update"
        ]
      },
      "ClusterAuthorizationRequest": {
        "properties": {
          "byoc": {
            "type": "boolean"
          },
          "account_username": {
            "type": "string"
          },
          "availability_zone": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "disconnected": {
            "type": "boolean"
          },
          "display_name": {
            "type": "string"
          },
          "external_cluster_id": {
            "type": "string"
          },
          "managed": {
            "type": "boolean"
          },
          "reserve": {
            "type": "boolean"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedResource"
            }
          }
        }
      },
      "ClusterAuthorizationResponse": {
        "properties": {
          "allowed": {
            "type": "boolean"
          },
          "excess_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedResource"
            }
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          }
        }
      },
      "ClusterRegistrationRequest": {
        "properties": {
          "authorization_token": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          }
        }
      },
      "ClusterRegistrationResponse": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "authorization_token": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "expires_at": {
            "description": "Cluster registration expiration.\n",
            "type": "string"
          }
        }
      },
      "FeatureToggle": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'FeatureToggle' if this is a complete object or 'FeatureToggleLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "FeatureToggleQueryRequest": {
        "properties": {
          "organization_id": {
            "type": "string"
          }
        }
      },
      "Label": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Label' if this is a complete object or 'LabelLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "internal": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Organization": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Organization' if this is a complete object or 'OrganizationLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "ebs_account_id": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Permission": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Permission' if this is a complete object or 'PermissionLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "resource_type": {
            "type": "string"
          }
        }
      },
      "Plan": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Plan' if this is a complete object or 'PlanLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ProductBundleEnum": {
        "description": "Usage of Subscription.\n",
        "type": "string",
        "enum": [
          
        ]
      },
      "PullSecretsRequest": {
        "properties": {
          "external_resource_id": {
            "type": "string"
          }
        }
      },
      "QuotaSummary": {
        "properties": {
          "byoc": {
            "type": "boolean"
          },
          "allowed": {
            "type": "integer",
            "format": "int32"
          },
          "availability_zone_type": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "reserved": {
            "type": "integer",
            "format": "int32"
          },
          "resource_name": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          }
        }
      },
      "Registry": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Registry' if this is a complete object or 'RegistryLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "cloud_alias": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "org_name": {
            "type": "string"
          },
          "team_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RegistryCredential": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'RegistryCredential' if this is a complete object or 'RegistryCredentialLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "external_resource_id": {
            "type": "string"
          },
          "registry": {
            "$ref": "#/components/schemas/Registry"
          },
          "token": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ReservedResource": {
        "properties": {
          "byoc": {
            "type": "boolean"
          },
          "availability_zone_type": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "resource_name": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Resource": {
        "description": "Identifies computing resources\n",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Resource' if this is a complete object or 'ResourceLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "byoc": {
            "type": "boolean"
          },
          "sku": {
            "type": "string"
          },
          "allowed": {
            "description": "Number of allowed nodes\n",
            "type": "integer",
            "format": "int32"
          },
          "availability_zone_type": {
            "type": "string"
          },
          "resource_name": {
            "description": "platform-specific name, such as \"M5.2Xlarge\" for a type of EC2 node\n",
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          }
        }
      },
      "ResourceQuota": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'ResourceQuota' if this is a complete object or 'ResourceQuotaLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "byoc": {
            "type": "boolean"
          },
          "sku": {
            "type": "string"
          },
          "allowed": {
            "type": "integer",
            "format": "int32"
          },
          "availability_zone_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "resource_name": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "sku_count": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Role": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Role' if this is a complete object or 'RoleLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "RoleBinding": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'RoleBinding' if this is a complete object or 'RoleBindingLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "account_id": {
            "type": "string"
          },
          "config_managed": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "organization_id": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "role_id": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "subscription_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ServiceLevelEnum": {
        "description": "Service Level of Subscription.\n",
        "type": "string",
        "enum": [
          
        ]
      },
      "Subscription": {
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Subscription' if this is a complete object or 'SubscriptionLink' if it is just a link.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.\n",
            "type": "string"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "consumer_uuid": {
            "type": "string"
          },
          "cpu_total": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "creator": {
            "description": "Link to the account that created the subscription.\n",
            "$ref": "#/components/schemas/Account"
          },
          "display_name": {
            "type": "string"
          },
          "external_cluster_id": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          },
          "last_reconcile_date": {
            "description": "Last time this subscription were reconciled about cluster usage\n",
            "type": "string",
            "format": "date-time"
          },
          "last_telemetry_date": {
            "description": "Last telemetry authorization request for this  cluster/subscription in Unix time\n",
            "type": "string",
            "format": "date-time"
          },
          "managed": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          },
          "plan": {
            "$ref": "#/components/schemas/Plan"
          },
          "product_bundle": {
            "$ref": "#/components/schemas/ProductBundleEnum"
          },
          "service_level": {
            "$ref": "#/components/schemas/ServiceLevelEnum"
          },
          "socket_total": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "support_level": {
            "$ref": "#/components/schemas/SupportLevelEnum"
          },
          "system_units": {
            "$ref": "#/components/schemas/SystemUnitsEnum"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "usage": {
            "$ref": "#/components/schemas/UsageEnum"
          }
        }
      },
      "SubscriptionNotify": {
        "description": "This struct is a request to send a templated email to a user related to this\nsubscription.\n",
        "properties": {
          "bcc_address": {
            "description": "The BCC address to be included on the email that is sent\n",
            "type": "string"
          },
          "cluster_id": {
            "description": "Indicates which Cluster (internal id) the resource type belongs to\n",
            "type": "string"
          },
          "cluster_uuid": {
            "description": "Indicates which Cluster (external id) the resource type belongs to\n",
            "type": "string"
          },
          "subject": {
            "description": "The email subject\n",
            "type": "string"
          },
          "subscription_id": {
            "description": "Indicates which Subscription the resource type belongs to\n",
            "type": "string"
          },
          "template_name": {
            "description": "The name of the template used to construct the email contents\n",
            "type": "string"
          },
          "template_parameters": {
            "description": "The values which will be substituted into the templated email\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateParameter"
            }
          }
        }
      },
      "SupportLevelEnum": {
        "description": "Support Level of Subscription.\n",
        "type": "string",
        "enum": [
          
        ]
      },
      "SystemUnitsEnum": {
        "description": "Usage of Subscription.\n",
        "type": "string",
        "enum": [
          
        ]
      },
      "TemplateParameter": {
        "description": "A template parameter is used in an email to replace placeholder content with\nvalues specific to the email recipient.\n",
        "properties": {
          "content": {
            "description": "The content that will replace the template parameter in the email\n",
            "type": "string"
          },
          "name": {
            "description": "Name of the value to be replaced\n",
            "type": "string"
          }
        }
      },
      "UsageEnum": {
        "description": "Usage of Subscription.\n",
        "type": "string",
        "enum": [
          
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will always be 'Error'\n",
            "type": "string"
          },
          "id": {
            "description": "Numeric identifier of the error.\n",
            "type": "integer",
            "format": "int32"
          },
          "href": {
            "description": "Self link.\n",
            "type": "string"
          },
          "code": {
            "description": "Globally unique code of the error, composed of the unique identifier of the API and the numeric identifier of the error. For example, for if the numeric identifier of the error is `93` and the identifier of the API is `clusters_mgmt` then the code will be `CLUSTERS-MGMT-93`.\n",
            "type": "string"
          },
          "reason": {
            "description": "Human readable description of the error.\n",
            "type": "string"
          },
          "details": {
            "description": "Extra information about the error.\n",
            "type": "object",
            "additionalProperties": "true"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearer": [
        
      ]
    }
  ]
}