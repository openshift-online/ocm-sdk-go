{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "addons_mgmt",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "OCM Feedback",
      "email": "ocm-feedback@redhat.com"
    }
  },
  "servers": [
    {
      "description": "Production",
      "url": "https://api.openshift.com"
    },
    {
      "description": "Stage",
      "url": "https://api.stage.openshift.com"
    }
  ],
  "paths": {
    "/api/addons_mgmt/v1": {
      "get": {
        "description": "Retrieves the version metadata.",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/addons": {
      "post": {
        "description": "Create a new addon and add it to the collection of addons.",
        "parameters": [
          {
            "name": "dryRun",
            "description": "DryRun indicates the request body will not be persisted when dryRun=true. ",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addon"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of addons.",
        "parameters": [
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the addon instead of\nthe names of the columns of a table. For example, in order to sort the addons\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the addon instead of\nthe names of the columns of a table. For example, in order to retrieve all the\naddons with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the addons\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of add-ons.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Addon"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/addons/{addon_id}": {
      "delete": {
        "description": "Deletes the addon.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the addon.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the addon.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "dryRun",
            "description": "DryRun indicates the request body will not be persisted when dryRun=true. ",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addon"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/addons/{addon_id}/versions": {
      "post": {
        "description": "Create a new addon version and add it to the collection of addons.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "dryRun",
            "description": "DryRun indicates the request body will not be persisted when dryRun=true. ",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonVersion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of addon versions.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the addon instead of\nthe names of the columns of a table. For example, in order to sort the addon\nversions descending by id the value should be:\n\n```sql\nid desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the addon version instead\nof the names of the columns of a table. For example, in order to retrieve all the\naddon versions with an id starting with `0.1` the value should be:\n\n```sql\nid like '0.1.%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the addon\nversions that the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of addon versions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonVersion"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/addons/{addon_id}/versions/{version_id}": {
      "delete": {
        "description": "Deletes the addon version.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the addon version.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the addon version.",
        "parameters": [
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "dryRun",
            "description": "DryRun indicates the request body will not be persisted when dryRun=true. ",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonVersion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVersion"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/clusters/{cluster_id}/addon_inquiries": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "Order criteria.\n\nThe syntax of this parameter is similar to the syntax of the _order by_ clause of\na SQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to sort the add-ons\ndescending by name the value should be:\n\n```sql\nname desc\n```\n\nIf the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement, but using the names of the attributes of the add-on instead of\nthe names of the columns of a table. For example, in order to retrieve all the\nadd-ons with a name starting with `my` the value should be:\n\n```sql\nname like 'my%'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the add-ons\nthat the user has permission to see will be returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of add-ons.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Addon"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection that match the search criteria,\nregardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/clusters/{cluster_id}/addon_inquiries/{addon_inquiry_id}": {
      "get": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_inquiry_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/clusters/{cluster_id}/addons": {
      "post": {
        "description": "Create a new addon status and add it to the collection of addons installation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonInstallation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonInstallation"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of addon installations for a cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "If the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of addon installations",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonInstallation"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection regardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/clusters/{cluster_id}/addons/{addon_id}": {
      "delete": {
        "description": "Deletes the addon installation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the addon installation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonInstallation"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the addon installation.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "dryRun",
            "description": "DryRun indicates the request body will not be persisted when dryRun=true. ",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonInstallation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonInstallation"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/clusters/{cluster_id}/status": {
      "post": {
        "description": "Create a new addon status and add it to the collection of addons statuses.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the list of addon statuses for a cluster.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order",
            "description": "If the parameter isn't provided, or if the value is empty, then the order of the\nresults is undefined.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Index of the requested page, where one corresponds to the first page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "description": "Maximum number of items that will be contained in the returned page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "description": "Retrieved list of addon status conditions",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonStatus"
                      }
                    },
                    "page": {
                      "description": "Index of the requested page, where one corresponds to the first page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "size": {
                      "description": "Maximum number of items that will be contained in the returned page.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total": {
                      "description": "Total number of items of the collection regardless of the size of the page.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/addons_mgmt/v1/clusters/{cluster_id}/status/{addon_id}": {
      "delete": {
        "description": "Deletes the addon version.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the details of the addon version.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the addon version.",
        "parameters": [
          {
            "name": "cluster_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "addon_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Metadata": {
        "description": "Version metadata.",
        "properties": {
          "server_version": {
            "description": "Version of the server.",
            "type": "string"
          }
        }
      },
      "AdditionalCatalogSource": {
        "description": "Representation of an addon catalog source object used by addon versions.",
        "properties": {
          "id": {
            "description": "ID of the additional catalog source",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates is this additional catalog source is enabled for the addon",
            "type": "boolean"
          },
          "image": {
            "description": "Image of the additional catalog source.",
            "type": "string"
          },
          "name": {
            "description": "Name of the additional catalog source.",
            "type": "string"
          }
        }
      },
      "Addon": {
        "description": "Representation of an addon that can be installed in a cluster.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'Addon' if this is a complete object or 'AddonLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "common_annotations": {
            "description": "Common Annotations for this addon.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "common_labels": {
            "description": "Common Labels for this addon.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "config": {
            "description": "Additional configs to be used by the addon once its installed in the cluster.",
            "$ref": "#/components/schemas/AddonConfig"
          },
          "credentials_requests": {
            "description": "List of credentials requests to authenticate operators to access cloud resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialRequest"
            }
          },
          "description": {
            "description": "Description of the addon.",
            "type": "string"
          },
          "docs_link": {
            "description": "Link to documentation about the addon.",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates if this addon can be added to clusters.",
            "type": "boolean"
          },
          "has_external_resources": {
            "description": "Indicates if this addon has external resources associated with it",
            "type": "boolean"
          },
          "hidden": {
            "description": "Indicates if this addon is hidden.",
            "type": "boolean"
          },
          "icon": {
            "description": "Base64-encoded icon representing an addon. The icon should be in PNG format.",
            "type": "string"
          },
          "install_mode": {
            "description": "The mode in which the addon is deployed.",
            "$ref": "#/components/schemas/AddonInstallMode"
          },
          "label": {
            "description": "Label used to attach to a cluster deployment when addon is installed.",
            "type": "string"
          },
          "managed_service": {
            "description": "Indicates if addon is part of a managed service",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the addon.",
            "type": "string"
          },
          "namespaces": {
            "description": "List of namespaces associated with this addon.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonNamespace"
            }
          },
          "operator_name": {
            "description": "The name of the operator installed by this addon.",
            "type": "string"
          },
          "parameters": {
            "description": "List of parameters for this addon.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonParameter"
            }
          },
          "requirements": {
            "description": "List of requirements for this addon.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonRequirement"
            }
          },
          "resource_cost": {
            "description": "Used to determine how many units of quota an addon consumes per resource name.",
            "type": "number",
            "format": "float"
          },
          "resource_name": {
            "description": "Used to determine from where to reserve quota for this addon.",
            "type": "string"
          },
          "sub_operators": {
            "description": "List of sub operators for this addon.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonSubOperator"
            }
          },
          "target_namespace": {
            "description": "The namespace in which the addon CRD exists.",
            "type": "string"
          },
          "version": {
            "description": "Link to the current default version of this addon.",
            "$ref": "#/components/schemas/AddonVersion"
          }
        }
      },
      "AddonConfig": {
        "description": "Representation of an addon config.\nThe attributes under it are to be used by the addon once its installed in the cluster.",
        "properties": {
          "add_on_environment_variables": {
            "description": "List of environment variables for the addon",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonEnvironmentVariable"
            }
          },
          "add_on_secret_propagations": {
            "description": "List of secret propagations for the addon",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonSecretPropagation"
            }
          }
        }
      },
      "AddonEnvironmentVariable": {
        "description": "Representation of an addon env object.",
        "properties": {
          "id": {
            "description": "ID for the environment variable",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates is this environment variable is enabled for the addon",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the environment variable",
            "type": "string"
          },
          "value": {
            "description": "Value of the environment variable",
            "type": "string"
          }
        }
      },
      "AddonInstallMode": {
        "description": "Representation of an addon InstallMode field.",
        "type": "string",
        "enum": [
          "all_namespaces",
          "own_namespace"
        ]
      },
      "AddonInstallation": {
        "description": "Representation of addon installation",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddonInstallation' if this is a complete object or 'AddonInstallationLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "addon": {
            "description": "Addon installed",
            "$ref": "#/components/schemas/Addon"
          },
          "addon_version": {
            "description": "Addon version of the addon",
            "$ref": "#/components/schemas/AddonVersion"
          },
          "billing": {
            "description": "Billing of addon installation.",
            "$ref": "#/components/schemas/AddonInstallationBilling"
          },
          "creation_timestamp": {
            "description": "Date and time when the add-on was initially installed in the cluster.",
            "type": "string",
            "format": "date-time"
          },
          "csv_name": {
            "description": "Current CSV installed on cluster",
            "type": "string"
          },
          "deleted_timestamp": {
            "description": "Date and time when the add-on installation deleted at.",
            "type": "string",
            "format": "date-time"
          },
          "desired_version": {
            "description": "Version of the next scheduled upgrade",
            "type": "string"
          },
          "operator_version": {
            "description": "Version of the operator installed by the add-on.",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters in the installation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonInstallationParameter"
            }
          },
          "state": {
            "description": "Addon Installation State",
            "$ref": "#/components/schemas/AddonInstallationState"
          },
          "state_description": {
            "description": "Reason for the current State.",
            "type": "string"
          },
          "subscription": {
            "description": "Subscription for the addon installation",
            "$ref": "#/components/schemas/ObjectReference"
          },
          "updated_timestamp": {
            "description": "Date and time when the add-on installation information was last updated.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddonInstallationBilling": {
        "description": "Representation of an add-on installation billing.",
        "properties": {
          "billing_marketplace_account": {
            "description": "Account ID for billing market place",
            "type": "string"
          },
          "billing_model": {
            "description": "Billing Model for addon resources",
            "$ref": "#/components/schemas/BillingModel"
          },
          "href": {
            "description": "Self link",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object",
            "type": "string"
          },
          "kind": {
            "description": "Indicates the type of this object",
            "type": "string"
          }
        }
      },
      "AddonInstallationParameter": {
        "description": "representation of addon installation parameter",
        "properties": {
          "href": {
            "description": "Self link",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object",
            "type": "string"
          },
          "kind": {
            "description": "Indicates the type of this object",
            "type": "string"
          },
          "value": {
            "description": "Value of the parameter",
            "type": "string"
          }
        }
      },
      "AddonInstallationParameters": {
        "description": "representation of addon installation parameter",
        "properties": {
          "items": {
            "description": "list of addon installation parameters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonInstallationParameter"
            }
          }
        }
      },
      "AddonInstallationState": {
        "description": "representation of addon installation state",
        "type": "string",
        "enum": [
          "delete-failed",
          "delete-pending",
          "deleted",
          "deleting",
          "failed",
          "installing",
          "pending",
          "ready",
          "undefined",
          "upgrading"
        ]
      },
      "AddonNamespace": {
        "description": "Representation of an addon namespace object.",
        "properties": {
          "annotations": {
            "description": "Annotations to be included in the addon namespace",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "enabled": {
            "description": "Enabled shows if this namespace object is in use",
            "type": "boolean"
          },
          "labels": {
            "description": "Labels to be included in the addon namespace",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "description": "Name of the namespace",
            "type": "string"
          }
        }
      },
      "AddonParameter": {
        "description": "Representation of an addon parameter.",
        "properties": {
          "id": {
            "description": "ID for this addon parameter",
            "type": "string"
          },
          "addon": {
            "$ref": "#/components/schemas/Addon"
          },
          "conditions": {
            "description": "Conditions in which this parameter is valid for",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonRequirement"
            }
          },
          "default_value": {
            "description": "Indicates the value default for the addon parameter.",
            "type": "string"
          },
          "description": {
            "description": "Description of the addon parameter.",
            "type": "string"
          },
          "editable": {
            "description": "Indicates if this parameter can be edited after creation.",
            "type": "boolean"
          },
          "editable_direction": {
            "description": "Restricts if the parameter can be upscaled/downscaled\nExpected values are \"up\", \"down\", or \"\" (no restriction).",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates if this parameter is enabled for the addon.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the addon parameter.",
            "type": "string"
          },
          "options": {
            "description": "List of options for the addon parameter value.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonParameterOption"
            }
          },
          "order": {
            "description": "Indicates the weight of the AddonParameter which would be used by sort order",
            "type": "integer",
            "format": "int32"
          },
          "required": {
            "description": "Indicates if this parameter is required by the addon.",
            "type": "boolean"
          },
          "validation": {
            "description": "Validation rule for the addon parameter.",
            "type": "string"
          },
          "validation_err_msg": {
            "description": "Error message to return should the parameter be invalid.",
            "type": "string"
          },
          "value_type": {
            "description": "Type of value of the addon parameter.",
            "$ref": "#/components/schemas/AddonParameterValueType"
          }
        }
      },
      "AddonParameterOption": {
        "description": "Representation of an addon parameter option.",
        "properties": {
          "name": {
            "description": "Name of the addon parameter option.",
            "type": "string"
          },
          "rank": {
            "description": "Rank of option to be used in cases where editable direction should be restricted.",
            "type": "integer",
            "format": "int32"
          },
          "requirements": {
            "description": "List of addon requirements for this parameter option.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonRequirement"
            }
          },
          "value": {
            "description": "Value of the addon parameter option.",
            "type": "string"
          }
        }
      },
      "AddonParameterValueType": {
        "description": "Representation of the value type for this specific addon parameter",
        "type": "string",
        "enum": [
          "cidr",
          "boolean",
          "number",
          "resource",
          "resource_requirement",
          "string"
        ]
      },
      "AddonParameters": {
        "description": "Representation of AddonParameters",
        "properties": {
          "items": {
            "description": "List of addon parameters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonParameter"
            }
          }
        }
      },
      "AddonRequirement": {
        "description": "Representation of an addon requirement.",
        "properties": {
          "id": {
            "description": "ID of the addon requirement.",
            "type": "string"
          },
          "data": {
            "description": "Data for the addon requirement.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "enabled": {
            "description": "Indicates if this requirement is enabled for the addon.",
            "type": "boolean"
          },
          "resource": {
            "description": "Type of resource of the addon requirement.",
            "$ref": "#/components/schemas/AddonRequirementResource"
          },
          "status": {
            "description": "Optional cluster specific status for the addon.",
            "$ref": "#/components/schemas/AddonRequirementStatus"
          }
        }
      },
      "AddonRequirementResource": {
        "description": "Addon requirement resource type",
        "type": "string",
        "enum": [
          "addon",
          "cluster",
          "machine_pool"
        ]
      },
      "AddonRequirementStatus": {
        "description": "Representation of an addon requirement status.",
        "properties": {
          "error_msgs": {
            "description": "Error messages detailing reasons for unfulfilled requirements.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fulfilled": {
            "description": "Indicates if this requirement is fulfilled.",
            "type": "boolean"
          }
        }
      },
      "AddonSecretPropagation": {
        "description": "Representation of an addon secret propagation",
        "properties": {
          "id": {
            "description": "ID of the secret propagation",
            "type": "string"
          },
          "destination_secret": {
            "description": "DestinationSecret is location of the secret to be added",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates is this secret propagation is enabled for the addon",
            "type": "boolean"
          },
          "source_secret": {
            "description": "SourceSecret is location of the source secret",
            "type": "string"
          }
        }
      },
      "AddonStatus": {
        "description": "Representation of an addon status.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddonStatus' if this is a complete object or 'AddonStatusLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "addon_id": {
            "description": "ID of the addon whose status belongs to.",
            "type": "string"
          },
          "correlation_id": {
            "description": "Identifier for co-relating current AddonCR revision and reported status.",
            "type": "string"
          },
          "status_conditions": {
            "description": "List of reported addon status conditions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonStatusCondition"
            }
          },
          "version": {
            "description": "Version of the addon reporting the status",
            "type": "string"
          }
        }
      },
      "AddonStatusCondition": {
        "description": "Representation of an addon status condition type.",
        "properties": {
          "message": {
            "description": "Message for the condition",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the condition",
            "type": "string"
          },
          "status_type": {
            "description": "Type of the reported addon status condition",
            "$ref": "#/components/schemas/AddonStatusConditionType"
          },
          "status_value": {
            "description": "Value of the reported addon status condition",
            "$ref": "#/components/schemas/AddonStatusConditionValue"
          }
        }
      },
      "AddonStatusConditionType": {
        "description": "Representation of an addon status condition type field.",
        "type": "string",
        "enum": [
          "Available",
          "Degraded",
          "DeleteTimeout",
          "Healthy",
          "Installed",
          "Paused",
          "ReadyToBeDeleted",
          "UpgradeStarted",
          "UpgradeSucceeded"
        ]
      },
      "AddonStatusConditionValue": {
        "description": "Representation of an addon status condition value field.",
        "type": "string",
        "enum": [
          "False",
          "True",
          "Unknown"
        ]
      },
      "AddonSubOperator": {
        "description": "Representation of an addon sub operator. A sub operator is an operator\nwho's life cycle is controlled by the addon umbrella operator.",
        "properties": {
          "addon": {
            "$ref": "#/components/schemas/Addon"
          },
          "enabled": {
            "description": "Indicates if the sub operator is enabled for the addon",
            "type": "boolean"
          },
          "operator_name": {
            "description": "Name of the addon sub operator",
            "type": "string"
          },
          "operator_namespace": {
            "description": "Namespace of the addon sub operator",
            "type": "string"
          }
        }
      },
      "AddonVersion": {
        "description": "Representation of an addon version.",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will be 'AddonVersion' if this is a complete object or 'AddonVersionLink' if it is just a link.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "additional_catalog_sources": {
            "description": "Additional catalog sources associated with this addon version",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalCatalogSource"
            }
          },
          "available_upgrades": {
            "description": "AvailableUpgrades is the list of versions this version can be upgraded to.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "description": "The specific addon catalog source channel of packages",
            "type": "string"
          },
          "config": {
            "description": "Additional configs to be used by the addon once its installed in the cluster.",
            "$ref": "#/components/schemas/AddonConfig"
          },
          "enabled": {
            "description": "Indicates if this addon version can be added to clusters.",
            "type": "boolean"
          },
          "metrics_federation": {
            "description": "Configuration parameters to be injected in the ServiceMonitor used for federation.",
            "$ref": "#/components/schemas/MetricsFederation"
          },
          "monitoring_stack": {
            "description": "Configuration parameters which will determine the underlying configuration of the MonitoringStack CR. ",
            "$ref": "#/components/schemas/MonitoringStack"
          },
          "package_image": {
            "description": "The url for the package image",
            "type": "string"
          },
          "parameters": {
            "description": "List of parameters for this addon version.",
            "$ref": "#/components/schemas/AddonParameters"
          },
          "pull_secret_name": {
            "description": "The pull secret name used for this addon version.",
            "type": "string"
          },
          "requirements": {
            "description": "List of requirements for this addon version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonRequirement"
            }
          },
          "source_image": {
            "description": "The catalog source image for this addon version.",
            "type": "string"
          },
          "sub_operators": {
            "description": "List of sub operators for this addon version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddonSubOperator"
            }
          },
          "upgrade_plans_created": {
            "description": "Indicates if upgrade plans have been created for this addon version",
            "type": "boolean"
          }
        }
      },
      "BillingModel": {
        "description": "Representation of an billing model field.",
        "type": "string",
        "enum": [
          "marketplace",
          "marketplace-aws",
          "marketplace-azure",
          "marketplace-rhm",
          "standard"
        ]
      },
      "CredentialRequest": {
        "description": "Contains the necessary attributes to allow each operator to access the necessary AWS resources",
        "properties": {
          "name": {
            "description": "Name of the credentials secret used to access cloud resources",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace where the credentials secret lives in the cluster",
            "type": "string"
          },
          "policy_permissions": {
            "description": "List of policy permissions needed to access cloud resources",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "service_account": {
            "description": "Service account name to use when authenticating",
            "type": "string"
          }
        }
      },
      "MetricsFederation": {
        "description": "Representation of Metrics Federation",
        "properties": {
          "match_labels": {
            "description": "List of labels used to discover the prometheus server(s) to be federated.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "match_names": {
            "description": "List of series names to federate from the prometheus server.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "namespace": {
            "description": "Namespace where the prometheus server is running.",
            "type": "string"
          },
          "port_name": {
            "description": "Indicates the name of the service port fronting the prometheus server.",
            "type": "string"
          }
        }
      },
      "MonitoringStack": {
        "description": "Representation of Monitoring Stack",
        "properties": {
          "enabled": {
            "description": "Indicates if the monitoring stack can be added to clusters for the addon.",
            "type": "boolean"
          },
          "resources": {
            "description": "Indicates the resources for the monitoring stack",
            "$ref": "#/components/schemas/MonitoringStackResources"
          }
        }
      },
      "MonitoringStackResource": {
        "description": "Representation of Monitoring Stack Resource",
        "properties": {
          "cpu": {
            "description": "Indicates the CPU resource for monitoring stack.",
            "type": "string"
          },
          "memory": {
            "description": "Indicates the memory resource for monitoring stack.",
            "type": "string"
          }
        }
      },
      "MonitoringStackResources": {
        "description": "Representation of Monitoring Stack Resources",
        "properties": {
          "limits": {
            "description": "Indicates the limit of resource for monitoring stack.",
            "$ref": "#/components/schemas/MonitoringStackResource"
          },
          "requests": {
            "description": "Indicates the requested amount of resource for monitoring stack.",
            "$ref": "#/components/schemas/MonitoringStackResource"
          }
        }
      },
      "ObjectReference": {
        "description": "representation of object reference/subscription",
        "properties": {
          "href": {
            "description": "Self Link",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the object.",
            "type": "string"
          },
          "kind": {
            "description": "Indicates the type of this object.",
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "kind": {
            "description": "Indicates the type of this object. Will always be 'Error'",
            "type": "string"
          },
          "id": {
            "description": "Numeric identifier of the error.",
            "type": "integer",
            "format": "int32"
          },
          "href": {
            "description": "Self link.",
            "type": "string"
          },
          "code": {
            "description": "Globally unique code of the error, composed of the unique identifier of the API and the numeric identifier of the error. For example, for if the numeric identifier of the error is `93` and the identifier of the API is `clusters_mgmt` then the code will be `CLUSTERS-MGMT-93`.",
            "type": "string"
          },
          "reason": {
            "description": "Human readable description of the error.",
            "type": "string"
          },
          "details": {
            "description": "Extra information about the error.",
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearer": [
        
      ]
    }
  ]
}